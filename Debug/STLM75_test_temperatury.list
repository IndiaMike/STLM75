
STLM75_test_temperatury.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003a4c  08003a4c  00013a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a84  08003a84  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a84  08003a84  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a84  08003a84  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a84  08003a84  00013a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a88  08003a88  00013a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
 10 .bss          00000150  2000002c  2000002c  0002002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000017c  2000017c  0002002c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dc38  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ef7  00000000  00000000  0002dc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  0002fb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000918  00000000  00000000  00030580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f913  00000000  00000000  00030e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e9f9  00000000  00000000  000507ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bd45c  00000000  00000000  0005f1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011c600  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002770  00000000  00000000  0011c654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003a34 	.word	0x08003a34

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	08003a34 	.word	0x08003a34

080001d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08a      	sub	sp, #40	; 0x28
 80001d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001da:	f107 0314 	add.w	r3, r7, #20
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ea:	4b31      	ldr	r3, [pc, #196]	; (80002b0 <MX_GPIO_Init+0xdc>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a30      	ldr	r2, [pc, #192]	; (80002b0 <MX_GPIO_Init+0xdc>)
 80001f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001f4:	6153      	str	r3, [r2, #20]
 80001f6:	4b2e      	ldr	r3, [pc, #184]	; (80002b0 <MX_GPIO_Init+0xdc>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80001fe:	613b      	str	r3, [r7, #16]
 8000200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000202:	4b2b      	ldr	r3, [pc, #172]	; (80002b0 <MX_GPIO_Init+0xdc>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a2a      	ldr	r2, [pc, #168]	; (80002b0 <MX_GPIO_Init+0xdc>)
 8000208:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800020c:	6153      	str	r3, [r2, #20]
 800020e:	4b28      	ldr	r3, [pc, #160]	; (80002b0 <MX_GPIO_Init+0xdc>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021a:	4b25      	ldr	r3, [pc, #148]	; (80002b0 <MX_GPIO_Init+0xdc>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	4a24      	ldr	r2, [pc, #144]	; (80002b0 <MX_GPIO_Init+0xdc>)
 8000220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000224:	6153      	str	r3, [r2, #20]
 8000226:	4b22      	ldr	r3, [pc, #136]	; (80002b0 <MX_GPIO_Init+0xdc>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800022e:	60bb      	str	r3, [r7, #8]
 8000230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000232:	4b1f      	ldr	r3, [pc, #124]	; (80002b0 <MX_GPIO_Init+0xdc>)
 8000234:	695b      	ldr	r3, [r3, #20]
 8000236:	4a1e      	ldr	r2, [pc, #120]	; (80002b0 <MX_GPIO_Init+0xdc>)
 8000238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800023c:	6153      	str	r3, [r2, #20]
 800023e:	4b1c      	ldr	r3, [pc, #112]	; (80002b0 <MX_GPIO_Init+0xdc>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000246:	607b      	str	r3, [r7, #4]
 8000248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	2120      	movs	r1, #32
 800024e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000252:	f000 fecb 	bl	8000fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000256:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800025a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800025c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000262:	2300      	movs	r3, #0
 8000264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000266:	f107 0314 	add.w	r3, r7, #20
 800026a:	4619      	mov	r1, r3
 800026c:	4811      	ldr	r0, [pc, #68]	; (80002b4 <MX_GPIO_Init+0xe0>)
 800026e:	f000 fd33 	bl	8000cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000272:	2320      	movs	r3, #32
 8000274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000276:	2301      	movs	r3, #1
 8000278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027a:	2300      	movs	r3, #0
 800027c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027e:	2300      	movs	r3, #0
 8000280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000282:	f107 0314 	add.w	r3, r7, #20
 8000286:	4619      	mov	r1, r3
 8000288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028c:	f000 fd24 	bl	8000cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nOS_INT_Pin;
 8000290:	2340      	movs	r3, #64	; 0x40
 8000292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000294:	2300      	movs	r3, #0
 8000296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000298:	2300      	movs	r3, #0
 800029a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(nOS_INT_GPIO_Port, &GPIO_InitStruct);
 800029c:	f107 0314 	add.w	r3, r7, #20
 80002a0:	4619      	mov	r1, r3
 80002a2:	4804      	ldr	r0, [pc, #16]	; (80002b4 <MX_GPIO_Init+0xe0>)
 80002a4:	f000 fd18 	bl	8000cd8 <HAL_GPIO_Init>

}
 80002a8:	bf00      	nop
 80002aa:	3728      	adds	r7, #40	; 0x28
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	40021000 	.word	0x40021000
 80002b4:	48000800 	.word	0x48000800

080002b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <MX_I2C1_Init+0x74>)
 80002be:	4a1c      	ldr	r2, [pc, #112]	; (8000330 <MX_I2C1_Init+0x78>)
 80002c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20000215;
 80002c2:	4b1a      	ldr	r3, [pc, #104]	; (800032c <MX_I2C1_Init+0x74>)
 80002c4:	4a1b      	ldr	r2, [pc, #108]	; (8000334 <MX_I2C1_Init+0x7c>)
 80002c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002c8:	4b18      	ldr	r3, [pc, #96]	; (800032c <MX_I2C1_Init+0x74>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ce:	4b17      	ldr	r3, [pc, #92]	; (800032c <MX_I2C1_Init+0x74>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002d4:	4b15      	ldr	r3, [pc, #84]	; (800032c <MX_I2C1_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002da:	4b14      	ldr	r3, [pc, #80]	; (800032c <MX_I2C1_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <MX_I2C1_Init+0x74>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002e6:	4b11      	ldr	r3, [pc, #68]	; (800032c <MX_I2C1_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	; (800032c <MX_I2C1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002f2:	480e      	ldr	r0, [pc, #56]	; (800032c <MX_I2C1_Init+0x74>)
 80002f4:	f000 fe92 	bl	800101c <HAL_I2C_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80002fe:	f000 f941 	bl	8000584 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000302:	2100      	movs	r1, #0
 8000304:	4809      	ldr	r0, [pc, #36]	; (800032c <MX_I2C1_Init+0x74>)
 8000306:	f001 fb73 	bl	80019f0 <HAL_I2CEx_ConfigAnalogFilter>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000310:	f000 f938 	bl	8000584 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000314:	2100      	movs	r1, #0
 8000316:	4805      	ldr	r0, [pc, #20]	; (800032c <MX_I2C1_Init+0x74>)
 8000318:	f001 fbb5 	bl	8001a86 <HAL_I2CEx_ConfigDigitalFilter>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000322:	f000 f92f 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000048 	.word	0x20000048
 8000330:	40005400 	.word	0x40005400
 8000334:	20000215 	.word	0x20000215

08000338 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b08a      	sub	sp, #40	; 0x28
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000340:	f107 0314 	add.w	r3, r7, #20
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
 800034c:	60da      	str	r2, [r3, #12]
 800034e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a1b      	ldr	r2, [pc, #108]	; (80003c4 <HAL_I2C_MspInit+0x8c>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d130      	bne.n	80003bc <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800035a:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <HAL_I2C_MspInit+0x90>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	4a1a      	ldr	r2, [pc, #104]	; (80003c8 <HAL_I2C_MspInit+0x90>)
 8000360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000364:	6153      	str	r3, [r2, #20]
 8000366:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <HAL_I2C_MspInit+0x90>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800036e:	613b      	str	r3, [r7, #16]
 8000370:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000372:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000378:	2312      	movs	r3, #18
 800037a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037c:	2300      	movs	r3, #0
 800037e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000380:	2303      	movs	r3, #3
 8000382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000384:	2304      	movs	r3, #4
 8000386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000388:	f107 0314 	add.w	r3, r7, #20
 800038c:	4619      	mov	r1, r3
 800038e:	480f      	ldr	r0, [pc, #60]	; (80003cc <HAL_I2C_MspInit+0x94>)
 8000390:	f000 fca2 	bl	8000cd8 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB8_FMP);
 8000394:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000398:	f001 fbc2 	bl	8001b20 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB9_FMP);
 800039c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80003a0:	f001 fbbe 	bl	8001b20 <HAL_I2CEx_EnableFastModePlus>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003a4:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <HAL_I2C_MspInit+0x90>)
 80003a6:	69db      	ldr	r3, [r3, #28]
 80003a8:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <HAL_I2C_MspInit+0x90>)
 80003aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003ae:	61d3      	str	r3, [r2, #28]
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <HAL_I2C_MspInit+0x90>)
 80003b2:	69db      	ldr	r3, [r3, #28]
 80003b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003bc:	bf00      	nop
 80003be:	3728      	adds	r7, #40	; 0x28
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40005400 	.word	0x40005400
 80003c8:	40021000 	.word	0x40021000
 80003cc:	48000400 	.word	0x48000400

080003d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d0:	b590      	push	{r4, r7, lr}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d6:	f000 fb0f 	bl	80009f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003da:	f000 f873 	bl	80004c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003de:	f7ff fef9 	bl	80001d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003e2:	f000 fa6d 	bl	80008c0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80003e6:	f7ff ff67 	bl	80002b8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  STLM75_Init(&stlm75_0, &hi2c1, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	492a      	ldr	r1, [pc, #168]	; (8000498 <main+0xc8>)
 80003ee:	482b      	ldr	r0, [pc, #172]	; (800049c <main+0xcc>)
 80003f0:	f000 f94b 	bl	800068a <STLM75_Init>
  STLM75_Init(&stlm75_1, &hi2c1, 1);
 80003f4:	2201      	movs	r2, #1
 80003f6:	4928      	ldr	r1, [pc, #160]	; (8000498 <main+0xc8>)
 80003f8:	4829      	ldr	r0, [pc, #164]	; (80004a0 <main+0xd0>)
 80003fa:	f000 f946 	bl	800068a <STLM75_Init>
  STLM75_Init(&stlm75_2, &hi2c1, 2);
 80003fe:	2202      	movs	r2, #2
 8000400:	4925      	ldr	r1, [pc, #148]	; (8000498 <main+0xc8>)
 8000402:	4828      	ldr	r0, [pc, #160]	; (80004a4 <main+0xd4>)
 8000404:	f000 f941 	bl	800068a <STLM75_Init>
  STLM75_Init(&stlm75_3, &hi2c1, 3);
 8000408:	2203      	movs	r2, #3
 800040a:	4923      	ldr	r1, [pc, #140]	; (8000498 <main+0xc8>)
 800040c:	4826      	ldr	r0, [pc, #152]	; (80004a8 <main+0xd8>)
 800040e:	f000 f93c 	bl	800068a <STLM75_Init>
  STLM75_Init(&stlm75_4, &hi2c1, 4);
 8000412:	2204      	movs	r2, #4
 8000414:	4920      	ldr	r1, [pc, #128]	; (8000498 <main+0xc8>)
 8000416:	4825      	ldr	r0, [pc, #148]	; (80004ac <main+0xdc>)
 8000418:	f000 f937 	bl	800068a <STLM75_Init>
  STLM75_Init(&stlm75_5, &hi2c1, 5);
 800041c:	2205      	movs	r2, #5
 800041e:	491e      	ldr	r1, [pc, #120]	; (8000498 <main+0xc8>)
 8000420:	4823      	ldr	r0, [pc, #140]	; (80004b0 <main+0xe0>)
 8000422:	f000 f932 	bl	800068a <STLM75_Init>
  STLM75_Init(&stlm75_6, &hi2c1, 6);
 8000426:	2206      	movs	r2, #6
 8000428:	491b      	ldr	r1, [pc, #108]	; (8000498 <main+0xc8>)
 800042a:	4822      	ldr	r0, [pc, #136]	; (80004b4 <main+0xe4>)
 800042c:	f000 f92d 	bl	800068a <STLM75_Init>
  STLM75_Init(&stlm75_7, &hi2c1, 7);
 8000430:	2207      	movs	r2, #7
 8000432:	4919      	ldr	r1, [pc, #100]	; (8000498 <main+0xc8>)
 8000434:	4820      	ldr	r0, [pc, #128]	; (80004b8 <main+0xe8>)
 8000436:	f000 f928 	bl	800068a <STLM75_Init>

  // settings example
  STLM75_SetTepmerature(&stlm75_0, STLM75_REG_TEMP_OVERLIMIT, 29);
 800043a:	221d      	movs	r2, #29
 800043c:	2103      	movs	r1, #3
 800043e:	4817      	ldr	r0, [pc, #92]	; (800049c <main+0xcc>)
 8000440:	f000 f96d 	bl	800071e <STLM75_SetTepmerature>
  STLM75_SetTepmerature(&stlm75_0, STLM75_REG_HYSTERESIS, 27);
 8000444:	221b      	movs	r2, #27
 8000446:	2102      	movs	r1, #2
 8000448:	4814      	ldr	r0, [pc, #80]	; (800049c <main+0xcc>)
 800044a:	f000 f968 	bl	800071e <STLM75_SetTepmerature>
  STLM75_SetFaultTolerance(&stlm75_0, STLM75_ALARM_FT_6);
 800044e:	2103      	movs	r1, #3
 8000450:	4812      	ldr	r0, [pc, #72]	; (800049c <main+0xcc>)
 8000452:	f000 f985 	bl	8000760 <STLM75_SetFaultTolerance>
  STLM75_SetMode(&stlm75_0, STLM75_MODE_NORMAL);
 8000456:	2100      	movs	r1, #0
 8000458:	4810      	ldr	r0, [pc, #64]	; (800049c <main+0xcc>)
 800045a:	f000 f936 	bl	80006ca <STLM75_SetMode>
  while (1)
  {
	  /*
	  temperature = ((int)STLM75_Read16(&stlm75_0, STLM75_REG_CONFIGURATION) >>8);
	  */
	  	  for(uint8_t i=0; i<8; i++)
 800045e:	2300      	movs	r3, #0
 8000460:	71fb      	strb	r3, [r7, #7]
 8000462:	e014      	b.n	800048e <main+0xbe>
	  	  	  {
	  		  	  temperature[i] = STLM75_ReadTemperature(termometers[i]);
 8000464:	79fb      	ldrb	r3, [r7, #7]
 8000466:	4a15      	ldr	r2, [pc, #84]	; (80004bc <main+0xec>)
 8000468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800046c:	79fc      	ldrb	r4, [r7, #7]
 800046e:	4618      	mov	r0, r3
 8000470:	f000 f9a4 	bl	80007bc <STLM75_ReadTemperature>
 8000474:	eef0 7a40 	vmov.f32	s15, s0
 8000478:	4a11      	ldr	r2, [pc, #68]	; (80004c0 <main+0xf0>)
 800047a:	00a3      	lsls	r3, r4, #2
 800047c:	4413      	add	r3, r2
 800047e:	edc3 7a00 	vstr	s15, [r3]
	  		  	  HAL_Delay(100);
 8000482:	2064      	movs	r0, #100	; 0x64
 8000484:	f000 fb1e 	bl	8000ac4 <HAL_Delay>
	  	  for(uint8_t i=0; i<8; i++)
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	3301      	adds	r3, #1
 800048c:	71fb      	strb	r3, [r7, #7]
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	2b07      	cmp	r3, #7
 8000492:	d9e7      	bls.n	8000464 <main+0x94>
 8000494:	e7e3      	b.n	800045e <main+0x8e>
 8000496:	bf00      	nop
 8000498:	20000048 	.word	0x20000048
 800049c:	200000dc 	.word	0x200000dc
 80004a0:	20000094 	.word	0x20000094
 80004a4:	200000cc 	.word	0x200000cc
 80004a8:	200000c4 	.word	0x200000c4
 80004ac:	200000ec 	.word	0x200000ec
 80004b0:	2000009c 	.word	0x2000009c
 80004b4:	200000d4 	.word	0x200000d4
 80004b8:	200000e4 	.word	0x200000e4
 80004bc:	20000000 	.word	0x20000000
 80004c0:	200000a4 	.word	0x200000a4

080004c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b0a6      	sub	sp, #152	; 0x98
 80004c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004ce:	2228      	movs	r2, #40	; 0x28
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f003 faa6 	bl	8003a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2258      	movs	r2, #88	; 0x58
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f003 fa98 	bl	8003a24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f4:	2302      	movs	r3, #2
 80004f6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f8:	2301      	movs	r3, #1
 80004fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fc:	2310      	movs	r3, #16
 80004fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000502:	2302      	movs	r3, #2
 8000504:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000508:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800050c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000510:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000514:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000518:	2300      	movs	r3, #0
 800051a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000522:	4618      	mov	r0, r3
 8000524:	f001 fb1c 	bl	8001b60 <HAL_RCC_OscConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800052e:	f000 f829 	bl	8000584 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000532:	230f      	movs	r3, #15
 8000534:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000536:	2302      	movs	r3, #2
 8000538:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800053e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000542:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000548:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800054c:	2102      	movs	r1, #2
 800054e:	4618      	mov	r0, r3
 8000550:	f002 fa1c 	bl	800298c <HAL_RCC_ClockConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800055a:	f000 f813 	bl	8000584 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800055e:	2322      	movs	r3, #34	; 0x22
 8000560:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000566:	2300      	movs	r3, #0
 8000568:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	4618      	mov	r0, r3
 800056e:	f002 fc43 	bl	8002df8 <HAL_RCCEx_PeriphCLKConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000578:	f000 f804 	bl	8000584 <Error_Handler>
  }
}
 800057c:	bf00      	nop
 800057e:	3798      	adds	r7, #152	; 0x98
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000588:	b672      	cpsid	i
}
 800058a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800058c:	e7fe      	b.n	800058c <Error_Handler+0x8>

0800058e <STLM75_Read8>:
#include "main.h"
#include "stlm75.h"


static uint8_t	STLM75_Read8(STLM75_t *stlm, uint8_t Register)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b088      	sub	sp, #32
 8000592:	af04      	add	r7, sp, #16
 8000594:	6078      	str	r0, [r7, #4]
 8000596:	460b      	mov	r3, r1
 8000598:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;

	HAL_I2C_Mem_Read(stlm->stlm75_i2c, stlm->adress, Register, 1, &Value, 1, STLM75_TIMEOUT);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6818      	ldr	r0, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	791b      	ldrb	r3, [r3, #4]
 80005a2:	b299      	uxth	r1, r3
 80005a4:	78fb      	ldrb	r3, [r7, #3]
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	230a      	movs	r3, #10
 80005aa:	9302      	str	r3, [sp, #8]
 80005ac:	2301      	movs	r3, #1
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	f107 030f 	add.w	r3, r7, #15
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2301      	movs	r3, #1
 80005b8:	f000 fed4 	bl	8001364 <HAL_I2C_Mem_Read>

	return Value;
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <STLM75_Read16>:

static uint16_t STLM75_Read16(STLM75_t *stlm, uint8_t Register)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b088      	sub	sp, #32
 80005ca:	af04      	add	r7, sp, #16
 80005cc:	6078      	str	r0, [r7, #4]
 80005ce:	460b      	mov	r3, r1
 80005d0:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	if(HAL_ERROR!=HAL_I2C_Mem_Read(stlm->stlm75_i2c, stlm->adress, Register, 1, Value, 2, STLM75_TIMEOUT))
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6818      	ldr	r0, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	791b      	ldrb	r3, [r3, #4]
 80005da:	b299      	uxth	r1, r3
 80005dc:	78fb      	ldrb	r3, [r7, #3]
 80005de:	b29a      	uxth	r2, r3
 80005e0:	230a      	movs	r3, #10
 80005e2:	9302      	str	r3, [sp, #8]
 80005e4:	2302      	movs	r3, #2
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2301      	movs	r3, #1
 80005f0:	f000 feb8 	bl	8001364 <HAL_I2C_Mem_Read>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d008      	beq.n	800060c <STLM75_Read16+0x46>
		return (Value[0]<<8 | Value[1]);
 80005fa:	7b3b      	ldrb	r3, [r7, #12]
 80005fc:	021b      	lsls	r3, r3, #8
 80005fe:	b21a      	sxth	r2, r3
 8000600:	7b7b      	ldrb	r3, [r7, #13]
 8000602:	b21b      	sxth	r3, r3
 8000604:	4313      	orrs	r3, r2
 8000606:	b21b      	sxth	r3, r3
 8000608:	b29b      	uxth	r3, r3
 800060a:	e001      	b.n	8000610 <STLM75_Read16+0x4a>
	else
		return 0x8000;
 800060c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <STLM75_Write8>:

static uint8_t STLM75_Write8(STLM75_t *stlm, uint8_t Register, uint8_t Value)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af04      	add	r7, sp, #16
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	70fb      	strb	r3, [r7, #3]
 8000624:	4613      	mov	r3, r2
 8000626:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(stlm->stlm75_i2c,stlm->adress,Register,1,&Value,1,STLM75_TIMEOUT);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	6818      	ldr	r0, [r3, #0]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	b299      	uxth	r1, r3
 8000632:	78fb      	ldrb	r3, [r7, #3]
 8000634:	b29a      	uxth	r2, r3
 8000636:	230a      	movs	r3, #10
 8000638:	9302      	str	r3, [sp, #8]
 800063a:	2301      	movs	r3, #1
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	1cbb      	adds	r3, r7, #2
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2301      	movs	r3, #1
 8000644:	f000 fd7a 	bl	800113c <HAL_I2C_Mem_Write>
	return 0;
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <STLM75_Write16>:

static uint8_t STLM75_Write16(STLM75_t *stlm, uint8_t Register, uint8_t* Value)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b088      	sub	sp, #32
 8000656:	af04      	add	r7, sp, #16
 8000658:	60f8      	str	r0, [r7, #12]
 800065a:	460b      	mov	r3, r1
 800065c:	607a      	str	r2, [r7, #4]
 800065e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(stlm->stlm75_i2c, stlm->adress, Register, 1, Value, 2, STLM75_TIMEOUT);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	b299      	uxth	r1, r3
 800066a:	7afb      	ldrb	r3, [r7, #11]
 800066c:	b29a      	uxth	r2, r3
 800066e:	230a      	movs	r3, #10
 8000670:	9302      	str	r3, [sp, #8]
 8000672:	2302      	movs	r3, #2
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2301      	movs	r3, #1
 800067c:	f000 fd5e 	bl	800113c <HAL_I2C_Mem_Write>
	return 0;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <STLM75_Init>:
 *  \param[in,out] *stlm	pointer to sensor structure.
 *  \param[in] stlm75_i2c	i2c handler
 *  \param[in]	address		device address set on the hardware (range 0 - 7). (configured by Pull-up / down resistors A0,A1,A2, see datasheet)
 */
void STLM75_Init(STLM75_t *stlm, I2C_HandleTypeDef* stlm75_i2c, uint8_t address)
{
 800068a:	b480      	push	{r7}
 800068c:	b087      	sub	sp, #28
 800068e:	af00      	add	r7, sp, #0
 8000690:	60f8      	str	r0, [r7, #12]
 8000692:	60b9      	str	r1, [r7, #8]
 8000694:	4613      	mov	r3, r2
 8000696:	71fb      	strb	r3, [r7, #7]
	stlm->stlm75_i2c = stlm75_i2c;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	601a      	str	r2, [r3, #0]

	uint8_t tmp = 0b10010001;
 800069e:	2391      	movs	r3, #145	; 0x91
 80006a0:	75fb      	strb	r3, [r7, #23]
	tmp |=(address & 0x07) <<1;
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	b25b      	sxtb	r3, r3
 80006a8:	f003 030e 	and.w	r3, r3, #14
 80006ac:	b25a      	sxtb	r2, r3
 80006ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	75fb      	strb	r3, [r7, #23]
	stlm->adress = tmp;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	7dfa      	ldrb	r2, [r7, #23]
 80006bc:	711a      	strb	r2, [r3, #4]
}
 80006be:	bf00      	nop
 80006c0:	371c      	adds	r7, #28
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <STLM75_SetMode>:
 *
 * \param[in] *stlm	Pointer to sensor structure.
 * \param[in] mode	Mode to be set (use macro STLM75_MODE_SHUTDOWN or STLM75_MODE_NORMAL).
 */
void STLM75_SetMode(STLM75_t *stlm, uint8_t mode)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b084      	sub	sp, #16
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
 80006d2:	460b      	mov	r3, r1
 80006d4:	70fb      	strb	r3, [r7, #3]
	if(mode > 1) return;
 80006d6:	78fb      	ldrb	r3, [r7, #3]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d81c      	bhi.n	8000716 <STLM75_SetMode+0x4c>
	uint8_t tmp = 0x00;
 80006dc:	2300      	movs	r3, #0
 80006de:	73fb      	strb	r3, [r7, #15]
	tmp = STLM75_Read8(stlm, STLM75_REG_CONFIGURATION);
 80006e0:	2101      	movs	r1, #1
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff ff53 	bl	800058e <STLM75_Read8>
 80006e8:	4603      	mov	r3, r0
 80006ea:	73fb      	strb	r3, [r7, #15]
	tmp &=0xFE;
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	f023 0301 	bic.w	r3, r3, #1
 80006f2:	73fb      	strb	r3, [r7, #15]
	tmp |=(mode & 0x01);
 80006f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006f8:	f003 0301 	and.w	r3, r3, #1
 80006fc:	b25a      	sxtb	r2, r3
 80006fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000702:	4313      	orrs	r3, r2
 8000704:	b25b      	sxtb	r3, r3
 8000706:	73fb      	strb	r3, [r7, #15]
	STLM75_Write8(stlm, STLM75_REG_CONFIGURATION, tmp);
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	461a      	mov	r2, r3
 800070c:	2101      	movs	r1, #1
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff ff82 	bl	8000618 <STLM75_Write8>
 8000714:	e000      	b.n	8000718 <STLM75_SetMode+0x4e>
	if(mode > 1) return;
 8000716:	bf00      	nop
}
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <STLM75_SetTepmerature>:
 * 							Use macro STLM75_REG_HYSTERESIS or STLM75_REG_TEMP_OVERLIMIT.
 * \param[in] temperature 	Temperature value to set. (Device allows to set temp with 0.5 deg accuracy
 * 							but only int value possibility on this function).
 */
int8_t STLM75_SetTepmerature(STLM75_t *stlm, uint8_t mem_address, int8_t temperature	)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b084      	sub	sp, #16
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
 8000726:	460b      	mov	r3, r1
 8000728:	70fb      	strb	r3, [r7, #3]
 800072a:	4613      	mov	r3, r2
 800072c:	70bb      	strb	r3, [r7, #2]
	if(mem_address != STLM75_REG_HYSTERESIS && mem_address != STLM75_REG_TEMP_OVERLIMIT) return -1;
 800072e:	78fb      	ldrb	r3, [r7, #3]
 8000730:	2b02      	cmp	r3, #2
 8000732:	d005      	beq.n	8000740 <STLM75_SetTepmerature+0x22>
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	2b03      	cmp	r3, #3
 8000738:	d002      	beq.n	8000740 <STLM75_SetTepmerature+0x22>
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	e00b      	b.n	8000758 <STLM75_SetTepmerature+0x3a>

	int8_t temp[2];
	temp[0] = temperature;
 8000740:	78bb      	ldrb	r3, [r7, #2]
 8000742:	733b      	strb	r3, [r7, #12]
	temp[1] = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	737b      	strb	r3, [r7, #13]

	STLM75_Write16(stlm, mem_address, temp);
 8000748:	f107 020c 	add.w	r2, r7, #12
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	4619      	mov	r1, r3
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ff7e 	bl	8000652 <STLM75_Write16>

	return 0;
 8000756:	2300      	movs	r3, #0
}
 8000758:	4618      	mov	r0, r3
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <STLM75_SetFaultTolerance>:
 * \param[in] *stlm					Pointer to sensor structure.
 * \param[in] consecutive_faults 	(0-3). Use macro STLM75_ALARM_FT_x (x = 1, 2, 4 or 6)
 * \retval error status
 */
int8_t STLM75_SetFaultTolerance(STLM75_t *stlm, uint8_t consecutive_faults)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]
	if(consecutive_faults > 3) return -1;	// parameter error value
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d902      	bls.n	8000778 <STLM75_SetFaultTolerance+0x18>
 8000772:	f04f 33ff 	mov.w	r3, #4294967295
 8000776:	e01d      	b.n	80007b4 <STLM75_SetFaultTolerance+0x54>

	uint8_t tmp = 0x00;
 8000778:	2300      	movs	r3, #0
 800077a:	73fb      	strb	r3, [r7, #15]
	tmp = STLM75_Read8(stlm, STLM75_REG_CONFIGURATION);
 800077c:	2101      	movs	r1, #1
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff ff05 	bl	800058e <STLM75_Read8>
 8000784:	4603      	mov	r3, r0
 8000786:	73fb      	strb	r3, [r7, #15]
	tmp &=0xE7;
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	f023 0318 	bic.w	r3, r3, #24
 800078e:	73fb      	strb	r3, [r7, #15]
	tmp |=((consecutive_faults << 3) & 0x18);
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	00db      	lsls	r3, r3, #3
 8000794:	b25b      	sxtb	r3, r3
 8000796:	f003 0318 	and.w	r3, r3, #24
 800079a:	b25a      	sxtb	r2, r3
 800079c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	73fb      	strb	r3, [r7, #15]
	STLM75_Write8(stlm, STLM75_REG_CONFIGURATION, tmp);
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	461a      	mov	r2, r3
 80007aa:	2101      	movs	r1, #1
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff ff33 	bl	8000618 <STLM75_Write8>
	return 0;
 80007b2:	2300      	movs	r3, #0
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <STLM75_ReadTemperature>:
 *
 * \param[in] *stlm		Pointer to sensor structure.
 * \retval Temperatre with 0.5 accuracy in Celsius
 */
float STLM75_ReadTemperature(STLM75_t *stlm)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	float temp=0.0;
 80007c4:	f04f 0300 	mov.w	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
	int16_t x=STLM75_Read16(stlm, STLM75_REG_TEMPERATURE);
 80007ca:	2100      	movs	r1, #0
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff fefa 	bl	80005c6 <STLM75_Read16>
 80007d2:	4603      	mov	r3, r0
 80007d4:	817b      	strh	r3, [r7, #10]

	temp = (float)(x>>7);
 80007d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007da:	11db      	asrs	r3, r3, #7
 80007dc:	b21b      	sxth	r3, r3
 80007de:	ee07 3a90 	vmov	s15, r3
 80007e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007e6:	edc7 7a03 	vstr	s15, [r7, #12]

	return (temp * 0.5f);
 80007ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80007ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80007f2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80007f6:	eeb0 0a67 	vmov.f32	s0, s15
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_MspInit+0x44>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <HAL_MspInit+0x44>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6193      	str	r3, [r2, #24]
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <HAL_MspInit+0x44>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_MspInit+0x44>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_MspInit+0x44>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_MspInit+0x44>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000836:	2007      	movs	r0, #7
 8000838:	f000 fa1a 	bl	8000c70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40021000 	.word	0x40021000

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800084c:	e7fe      	b.n	800084c <NMI_Handler+0x4>

0800084e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <HardFault_Handler+0x4>

08000854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <MemManage_Handler+0x4>

0800085a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <BusFault_Handler+0x4>

08000860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <UsageFault_Handler+0x4>

08000866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000894:	f000 f8f6 	bl	8000a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}

0800089c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <SystemInit+0x20>)
 80008a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <SystemInit+0x20>)
 80008a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008c6:	4a15      	ldr	r2, [pc, #84]	; (800091c <MX_USART2_UART_Init+0x5c>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008cc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80008d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_USART2_UART_Init+0x58>)
 8000904:	f002 fc96 	bl	8003234 <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800090e:	f7ff fe39 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000f4 	.word	0x200000f4
 800091c:	40004400 	.word	0x40004400

08000920 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a17      	ldr	r2, [pc, #92]	; (800099c <HAL_UART_MspInit+0x7c>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d128      	bne.n	8000994 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000942:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <HAL_UART_MspInit+0x80>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	4a16      	ldr	r2, [pc, #88]	; (80009a0 <HAL_UART_MspInit+0x80>)
 8000948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094c:	61d3      	str	r3, [r2, #28]
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <HAL_UART_MspInit+0x80>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <HAL_UART_MspInit+0x80>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <HAL_UART_MspInit+0x80>)
 8000960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000964:	6153      	str	r3, [r2, #20]
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <HAL_UART_MspInit+0x80>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000972:	230c      	movs	r3, #12
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000982:	2307      	movs	r3, #7
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000990:	f000 f9a2 	bl	8000cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	; 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40004400 	.word	0x40004400
 80009a0:	40021000 	.word	0x40021000

080009a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009dc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009aa:	490e      	ldr	r1, [pc, #56]	; (80009e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009ac:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <LoopForever+0xe>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b0:	e002      	b.n	80009b8 <LoopCopyDataInit>

080009b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b6:	3304      	adds	r3, #4

080009b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009bc:	d3f9      	bcc.n	80009b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009be:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c0:	4c0b      	ldr	r4, [pc, #44]	; (80009f0 <LoopForever+0x16>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c4:	e001      	b.n	80009ca <LoopFillZerobss>

080009c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c8:	3204      	adds	r2, #4

080009ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009cc:	d3fb      	bcc.n	80009c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ce:	f7ff ff65 	bl	800089c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009d2:	f003 f803 	bl	80039dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009d6:	f7ff fcfb 	bl	80003d0 <main>

080009da <LoopForever>:

LoopForever:
    b LoopForever
 80009da:	e7fe      	b.n	80009da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80009e8:	08003a8c 	.word	0x08003a8c
  ldr r2, =_sbss
 80009ec:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80009f0:	2000017c 	.word	0x2000017c

080009f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC1_2_IRQHandler>
	...

080009f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_Init+0x28>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <HAL_Init+0x28>)
 8000a02:	f043 0310 	orr.w	r3, r3, #16
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f000 f931 	bl	8000c70 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f000 f808 	bl	8000a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a14:	f7ff fef4 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40022000 	.word	0x40022000

08000a24 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_InitTick+0x54>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_InitTick+0x58>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f93b 	bl	8000cbe <HAL_SYSTICK_Config>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00e      	b.n	8000a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d80a      	bhi.n	8000a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f000 f911 	bl	8000c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a64:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <HAL_InitTick+0x5c>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e000      	b.n	8000a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000020 	.word	0x20000020
 8000a7c:	20000028 	.word	0x20000028
 8000a80:	20000024 	.word	0x20000024

08000a84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x20>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_IncTick+0x24>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_IncTick+0x24>)
 8000a96:	6013      	str	r3, [r2, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000028 	.word	0x20000028
 8000aa8:	20000178 	.word	0x20000178

08000aac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_GetTick+0x14>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000178 	.word	0x20000178

08000ac4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000acc:	f7ff ffee 	bl	8000aac <HAL_GetTick>
 8000ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000adc:	d005      	beq.n	8000aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ade:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_Delay+0x44>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000aea:	bf00      	nop
 8000aec:	f7ff ffde 	bl	8000aac <HAL_GetTick>
 8000af0:	4602      	mov	r2, r0
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d8f7      	bhi.n	8000aec <HAL_Delay+0x28>
  {
  }
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000028 	.word	0x20000028

08000b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	; (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	; 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	; 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c3c:	d301      	bcc.n	8000c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00f      	b.n	8000c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <SysTick_Config+0x40>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f7ff ff8e 	bl	8000b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <SysTick_Config+0x40>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <SysTick_Config+0x40>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff47 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c98:	f7ff ff5c 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	6978      	ldr	r0, [r7, #20]
 8000ca4:	f7ff ff8e 	bl	8000bc4 <NVIC_EncodePriority>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff5d 	bl	8000b70 <__NVIC_SetPriority>
}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ffb0 	bl	8000c2c <SysTick_Config>
 8000ccc:	4603      	mov	r3, r0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b087      	sub	sp, #28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce6:	e160      	b.n	8000faa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	2101      	movs	r1, #1
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f000 8152 	beq.w	8000fa4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 0303 	and.w	r3, r3, #3
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d005      	beq.n	8000d18 <HAL_GPIO_Init+0x40>
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d130      	bne.n	8000d7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2203      	movs	r2, #3
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d4e:	2201      	movs	r2, #1
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	091b      	lsrs	r3, r3, #4
 8000d64:	f003 0201 	and.w	r2, r3, #1
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d017      	beq.n	8000db6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2203      	movs	r2, #3
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d123      	bne.n	8000e0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	08da      	lsrs	r2, r3, #3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3208      	adds	r2, #8
 8000dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	220f      	movs	r2, #15
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	691a      	ldr	r2, [r3, #16]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	f003 0307 	and.w	r3, r3, #7
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	08da      	lsrs	r2, r3, #3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3208      	adds	r2, #8
 8000e04:	6939      	ldr	r1, [r7, #16]
 8000e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0203 	and.w	r2, r3, #3
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 80ac 	beq.w	8000fa4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4c:	4b5e      	ldr	r3, [pc, #376]	; (8000fc8 <HAL_GPIO_Init+0x2f0>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a5d      	ldr	r2, [pc, #372]	; (8000fc8 <HAL_GPIO_Init+0x2f0>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b5b      	ldr	r3, [pc, #364]	; (8000fc8 <HAL_GPIO_Init+0x2f0>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e64:	4a59      	ldr	r2, [pc, #356]	; (8000fcc <HAL_GPIO_Init+0x2f4>)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	089b      	lsrs	r3, r3, #2
 8000e6a:	3302      	adds	r3, #2
 8000e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	220f      	movs	r2, #15
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e8e:	d025      	beq.n	8000edc <HAL_GPIO_Init+0x204>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a4f      	ldr	r2, [pc, #316]	; (8000fd0 <HAL_GPIO_Init+0x2f8>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d01f      	beq.n	8000ed8 <HAL_GPIO_Init+0x200>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a4e      	ldr	r2, [pc, #312]	; (8000fd4 <HAL_GPIO_Init+0x2fc>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d019      	beq.n	8000ed4 <HAL_GPIO_Init+0x1fc>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a4d      	ldr	r2, [pc, #308]	; (8000fd8 <HAL_GPIO_Init+0x300>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d013      	beq.n	8000ed0 <HAL_GPIO_Init+0x1f8>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a4c      	ldr	r2, [pc, #304]	; (8000fdc <HAL_GPIO_Init+0x304>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d00d      	beq.n	8000ecc <HAL_GPIO_Init+0x1f4>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a4b      	ldr	r2, [pc, #300]	; (8000fe0 <HAL_GPIO_Init+0x308>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d007      	beq.n	8000ec8 <HAL_GPIO_Init+0x1f0>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a4a      	ldr	r2, [pc, #296]	; (8000fe4 <HAL_GPIO_Init+0x30c>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d101      	bne.n	8000ec4 <HAL_GPIO_Init+0x1ec>
 8000ec0:	2306      	movs	r3, #6
 8000ec2:	e00c      	b.n	8000ede <HAL_GPIO_Init+0x206>
 8000ec4:	2307      	movs	r3, #7
 8000ec6:	e00a      	b.n	8000ede <HAL_GPIO_Init+0x206>
 8000ec8:	2305      	movs	r3, #5
 8000eca:	e008      	b.n	8000ede <HAL_GPIO_Init+0x206>
 8000ecc:	2304      	movs	r3, #4
 8000ece:	e006      	b.n	8000ede <HAL_GPIO_Init+0x206>
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e004      	b.n	8000ede <HAL_GPIO_Init+0x206>
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	e002      	b.n	8000ede <HAL_GPIO_Init+0x206>
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e000      	b.n	8000ede <HAL_GPIO_Init+0x206>
 8000edc:	2300      	movs	r3, #0
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	f002 0203 	and.w	r2, r2, #3
 8000ee4:	0092      	lsls	r2, r2, #2
 8000ee6:	4093      	lsls	r3, r2
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eee:	4937      	ldr	r1, [pc, #220]	; (8000fcc <HAL_GPIO_Init+0x2f4>)
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	089b      	lsrs	r3, r3, #2
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000efc:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <HAL_GPIO_Init+0x310>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f20:	4a31      	ldr	r2, [pc, #196]	; (8000fe8 <HAL_GPIO_Init+0x310>)
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f26:	4b30      	ldr	r3, [pc, #192]	; (8000fe8 <HAL_GPIO_Init+0x310>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f4a:	4a27      	ldr	r2, [pc, #156]	; (8000fe8 <HAL_GPIO_Init+0x310>)
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f50:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <HAL_GPIO_Init+0x310>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f74:	4a1c      	ldr	r2, [pc, #112]	; (8000fe8 <HAL_GPIO_Init+0x310>)
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <HAL_GPIO_Init+0x310>)
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <HAL_GPIO_Init+0x310>)
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f47f ae97 	bne.w	8000ce8 <HAL_GPIO_Init+0x10>
  }
}
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010000 	.word	0x40010000
 8000fd0:	48000400 	.word	0x48000400
 8000fd4:	48000800 	.word	0x48000800
 8000fd8:	48000c00 	.word	0x48000c00
 8000fdc:	48001000 	.word	0x48001000
 8000fe0:	48001400 	.word	0x48001400
 8000fe4:	48001800 	.word	0x48001800
 8000fe8:	40010400 	.word	0x40010400

08000fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ffc:	787b      	ldrb	r3, [r7, #1]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001002:	887a      	ldrh	r2, [r7, #2]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001008:	e002      	b.n	8001010 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800100a:	887a      	ldrh	r2, [r7, #2]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e081      	b.n	8001132 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d106      	bne.n	8001048 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff f978 	bl	8000338 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2224      	movs	r2, #36	; 0x24
 800104c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0201 	bic.w	r2, r2, #1
 800105e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800106c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800107c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d107      	bne.n	8001096 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	e006      	b.n	80010a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80010a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d104      	bne.n	80010b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	691a      	ldr	r2, [r3, #16]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69d9      	ldr	r1, [r3, #28]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a1a      	ldr	r2, [r3, #32]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0201 	orr.w	r2, r2, #1
 8001112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2220      	movs	r2, #32
 800111e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af02      	add	r7, sp, #8
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	4608      	mov	r0, r1
 8001146:	4611      	mov	r1, r2
 8001148:	461a      	mov	r2, r3
 800114a:	4603      	mov	r3, r0
 800114c:	817b      	strh	r3, [r7, #10]
 800114e:	460b      	mov	r3, r1
 8001150:	813b      	strh	r3, [r7, #8]
 8001152:	4613      	mov	r3, r2
 8001154:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b20      	cmp	r3, #32
 8001160:	f040 80f9 	bne.w	8001356 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001164:	6a3b      	ldr	r3, [r7, #32]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d002      	beq.n	8001170 <HAL_I2C_Mem_Write+0x34>
 800116a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800116c:	2b00      	cmp	r3, #0
 800116e:	d105      	bne.n	800117c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001176:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e0ed      	b.n	8001358 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001182:	2b01      	cmp	r3, #1
 8001184:	d101      	bne.n	800118a <HAL_I2C_Mem_Write+0x4e>
 8001186:	2302      	movs	r3, #2
 8001188:	e0e6      	b.n	8001358 <HAL_I2C_Mem_Write+0x21c>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001192:	f7ff fc8b 	bl	8000aac <HAL_GetTick>
 8001196:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2319      	movs	r3, #25
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f000 fac3 	bl	8001730 <I2C_WaitOnFlagUntilTimeout>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e0d1      	b.n	8001358 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2221      	movs	r2, #33	; 0x21
 80011b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2240      	movs	r2, #64	; 0x40
 80011c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2200      	movs	r2, #0
 80011c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6a3a      	ldr	r2, [r7, #32]
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2200      	movs	r2, #0
 80011da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011dc:	88f8      	ldrh	r0, [r7, #6]
 80011de:	893a      	ldrh	r2, [r7, #8]
 80011e0:	8979      	ldrh	r1, [r7, #10]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	4603      	mov	r3, r0
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f000 f9d3 	bl	8001598 <I2C_RequestMemoryWrite>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d005      	beq.n	8001204 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e0a9      	b.n	8001358 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001208:	b29b      	uxth	r3, r3
 800120a:	2bff      	cmp	r3, #255	; 0xff
 800120c:	d90e      	bls.n	800122c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	22ff      	movs	r2, #255	; 0xff
 8001212:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001218:	b2da      	uxtb	r2, r3
 800121a:	8979      	ldrh	r1, [r7, #10]
 800121c:	2300      	movs	r3, #0
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f000 fbb5 	bl	8001994 <I2C_TransferConfig>
 800122a:	e00f      	b.n	800124c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001230:	b29a      	uxth	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800123a:	b2da      	uxtb	r2, r3
 800123c:	8979      	ldrh	r1, [r7, #10]
 800123e:	2300      	movs	r3, #0
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f000 fba4 	bl	8001994 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f000 faad 	bl	80017b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e07b      	b.n	8001358 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	781a      	ldrb	r2, [r3, #0]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800127a:	b29b      	uxth	r3, r3
 800127c:	3b01      	subs	r3, #1
 800127e:	b29a      	uxth	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001288:	3b01      	subs	r3, #1
 800128a:	b29a      	uxth	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001294:	b29b      	uxth	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d034      	beq.n	8001304 <HAL_I2C_Mem_Write+0x1c8>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d130      	bne.n	8001304 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a8:	2200      	movs	r2, #0
 80012aa:	2180      	movs	r1, #128	; 0x80
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f000 fa3f 	bl	8001730 <I2C_WaitOnFlagUntilTimeout>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e04d      	b.n	8001358 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	2bff      	cmp	r3, #255	; 0xff
 80012c4:	d90e      	bls.n	80012e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	22ff      	movs	r2, #255	; 0xff
 80012ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	8979      	ldrh	r1, [r7, #10]
 80012d4:	2300      	movs	r3, #0
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f000 fb59 	bl	8001994 <I2C_TransferConfig>
 80012e2:	e00f      	b.n	8001304 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	8979      	ldrh	r1, [r7, #10]
 80012f6:	2300      	movs	r3, #0
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f000 fb48 	bl	8001994 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001308:	b29b      	uxth	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d19e      	bne.n	800124c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f000 fa8c 	bl	8001830 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e01a      	b.n	8001358 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2220      	movs	r2, #32
 8001328:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6859      	ldr	r1, [r3, #4]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_I2C_Mem_Write+0x224>)
 8001336:	400b      	ands	r3, r1
 8001338:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2220      	movs	r2, #32
 800133e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001356:	2302      	movs	r3, #2
  }
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	fe00e800 	.word	0xfe00e800

08001364 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af02      	add	r7, sp, #8
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	4608      	mov	r0, r1
 800136e:	4611      	mov	r1, r2
 8001370:	461a      	mov	r2, r3
 8001372:	4603      	mov	r3, r0
 8001374:	817b      	strh	r3, [r7, #10]
 8001376:	460b      	mov	r3, r1
 8001378:	813b      	strh	r3, [r7, #8]
 800137a:	4613      	mov	r3, r2
 800137c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b20      	cmp	r3, #32
 8001388:	f040 80fd 	bne.w	8001586 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800138c:	6a3b      	ldr	r3, [r7, #32]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d002      	beq.n	8001398 <HAL_I2C_Mem_Read+0x34>
 8001392:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001394:	2b00      	cmp	r3, #0
 8001396:	d105      	bne.n	80013a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800139e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e0f1      	b.n	8001588 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d101      	bne.n	80013b2 <HAL_I2C_Mem_Read+0x4e>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e0ea      	b.n	8001588 <HAL_I2C_Mem_Read+0x224>
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013ba:	f7ff fb77 	bl	8000aac <HAL_GetTick>
 80013be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2319      	movs	r3, #25
 80013c6:	2201      	movs	r2, #1
 80013c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f000 f9af 	bl	8001730 <I2C_WaitOnFlagUntilTimeout>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0d5      	b.n	8001588 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2222      	movs	r2, #34	; 0x22
 80013e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2240      	movs	r2, #64	; 0x40
 80013e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2200      	movs	r2, #0
 80013f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6a3a      	ldr	r2, [r7, #32]
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2200      	movs	r2, #0
 8001402:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001404:	88f8      	ldrh	r0, [r7, #6]
 8001406:	893a      	ldrh	r2, [r7, #8]
 8001408:	8979      	ldrh	r1, [r7, #10]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	4603      	mov	r3, r0
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f000 f913 	bl	8001640 <I2C_RequestMemoryRead>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e0ad      	b.n	8001588 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001430:	b29b      	uxth	r3, r3
 8001432:	2bff      	cmp	r3, #255	; 0xff
 8001434:	d90e      	bls.n	8001454 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	22ff      	movs	r2, #255	; 0xff
 800143a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001440:	b2da      	uxtb	r2, r3
 8001442:	8979      	ldrh	r1, [r7, #10]
 8001444:	4b52      	ldr	r3, [pc, #328]	; (8001590 <HAL_I2C_Mem_Read+0x22c>)
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f000 faa1 	bl	8001994 <I2C_TransferConfig>
 8001452:	e00f      	b.n	8001474 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001458:	b29a      	uxth	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001462:	b2da      	uxtb	r2, r3
 8001464:	8979      	ldrh	r1, [r7, #10]
 8001466:	4b4a      	ldr	r3, [pc, #296]	; (8001590 <HAL_I2C_Mem_Read+0x22c>)
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f000 fa90 	bl	8001994 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147a:	2200      	movs	r2, #0
 800147c:	2104      	movs	r1, #4
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 f956 	bl	8001730 <I2C_WaitOnFlagUntilTimeout>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e07c      	b.n	8001588 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014aa:	3b01      	subs	r3, #1
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	3b01      	subs	r3, #1
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d034      	beq.n	8001534 <HAL_I2C_Mem_Read+0x1d0>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d130      	bne.n	8001534 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d8:	2200      	movs	r2, #0
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f000 f927 	bl	8001730 <I2C_WaitOnFlagUntilTimeout>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e04d      	b.n	8001588 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	2bff      	cmp	r3, #255	; 0xff
 80014f4:	d90e      	bls.n	8001514 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	22ff      	movs	r2, #255	; 0xff
 80014fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001500:	b2da      	uxtb	r2, r3
 8001502:	8979      	ldrh	r1, [r7, #10]
 8001504:	2300      	movs	r3, #0
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f000 fa41 	bl	8001994 <I2C_TransferConfig>
 8001512:	e00f      	b.n	8001534 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001518:	b29a      	uxth	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001522:	b2da      	uxtb	r2, r3
 8001524:	8979      	ldrh	r1, [r7, #10]
 8001526:	2300      	movs	r3, #0
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f000 fa30 	bl	8001994 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001538:	b29b      	uxth	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d19a      	bne.n	8001474 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f000 f974 	bl	8001830 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e01a      	b.n	8001588 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2220      	movs	r2, #32
 8001558:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6859      	ldr	r1, [r3, #4]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_I2C_Mem_Read+0x230>)
 8001566:	400b      	ands	r3, r1
 8001568:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2220      	movs	r2, #32
 800156e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	e000      	b.n	8001588 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001586:	2302      	movs	r3, #2
  }
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	80002400 	.word	0x80002400
 8001594:	fe00e800 	.word	0xfe00e800

08001598 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af02      	add	r7, sp, #8
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	4608      	mov	r0, r1
 80015a2:	4611      	mov	r1, r2
 80015a4:	461a      	mov	r2, r3
 80015a6:	4603      	mov	r3, r0
 80015a8:	817b      	strh	r3, [r7, #10]
 80015aa:	460b      	mov	r3, r1
 80015ac:	813b      	strh	r3, [r7, #8]
 80015ae:	4613      	mov	r3, r2
 80015b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	8979      	ldrh	r1, [r7, #10]
 80015b8:	4b20      	ldr	r3, [pc, #128]	; (800163c <I2C_RequestMemoryWrite+0xa4>)
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 f9e7 	bl	8001994 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	69b9      	ldr	r1, [r7, #24]
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f8f0 	bl	80017b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e02c      	b.n	8001634 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d105      	bne.n	80015ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80015e0:	893b      	ldrh	r3, [r7, #8]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	629a      	str	r2, [r3, #40]	; 0x28
 80015ea:	e015      	b.n	8001618 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80015ec:	893b      	ldrh	r3, [r7, #8]
 80015ee:	0a1b      	lsrs	r3, r3, #8
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015fa:	69fa      	ldr	r2, [r7, #28]
 80015fc:	69b9      	ldr	r1, [r7, #24]
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 f8d6 	bl	80017b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e012      	b.n	8001634 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800160e:	893b      	ldrh	r3, [r7, #8]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	2200      	movs	r2, #0
 8001620:	2180      	movs	r1, #128	; 0x80
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f000 f884 	bl	8001730 <I2C_WaitOnFlagUntilTimeout>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	80002000 	.word	0x80002000

08001640 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af02      	add	r7, sp, #8
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	4608      	mov	r0, r1
 800164a:	4611      	mov	r1, r2
 800164c:	461a      	mov	r2, r3
 800164e:	4603      	mov	r3, r0
 8001650:	817b      	strh	r3, [r7, #10]
 8001652:	460b      	mov	r3, r1
 8001654:	813b      	strh	r3, [r7, #8]
 8001656:	4613      	mov	r3, r2
 8001658:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	8979      	ldrh	r1, [r7, #10]
 8001660:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <I2C_RequestMemoryRead+0xa4>)
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f000 f994 	bl	8001994 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800166c:	69fa      	ldr	r2, [r7, #28]
 800166e:	69b9      	ldr	r1, [r7, #24]
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f000 f89d 	bl	80017b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e02c      	b.n	80016da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d105      	bne.n	8001692 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001686:	893b      	ldrh	r3, [r7, #8]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	629a      	str	r2, [r3, #40]	; 0x28
 8001690:	e015      	b.n	80016be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001692:	893b      	ldrh	r3, [r7, #8]
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	b29b      	uxth	r3, r3
 8001698:	b2da      	uxtb	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	69b9      	ldr	r1, [r7, #24]
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f000 f883 	bl	80017b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e012      	b.n	80016da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016b4:	893b      	ldrh	r3, [r7, #8]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	2200      	movs	r2, #0
 80016c6:	2140      	movs	r1, #64	; 0x40
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f000 f831 	bl	8001730 <I2C_WaitOnFlagUntilTimeout>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	80002000 	.word	0x80002000

080016e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d103      	bne.n	8001706 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2200      	movs	r2, #0
 8001704:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b01      	cmp	r3, #1
 8001712:	d007      	beq.n	8001724 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	699a      	ldr	r2, [r3, #24]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	619a      	str	r2, [r3, #24]
  }
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	603b      	str	r3, [r7, #0]
 800173c:	4613      	mov	r3, r2
 800173e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001740:	e022      	b.n	8001788 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001748:	d01e      	beq.n	8001788 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800174a:	f7ff f9af 	bl	8000aac <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d302      	bcc.n	8001760 <I2C_WaitOnFlagUntilTimeout+0x30>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d113      	bne.n	8001788 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001764:	f043 0220 	orr.w	r2, r3, #32
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2220      	movs	r2, #32
 8001770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e00f      	b.n	80017a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699a      	ldr	r2, [r3, #24]
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	4013      	ands	r3, r2
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	429a      	cmp	r2, r3
 8001796:	bf0c      	ite	eq
 8001798:	2301      	moveq	r3, #1
 800179a:	2300      	movne	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	461a      	mov	r2, r3
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d0cd      	beq.n	8001742 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017bc:	e02c      	b.n	8001818 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 f870 	bl	80018a8 <I2C_IsAcknowledgeFailed>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e02a      	b.n	8001828 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d8:	d01e      	beq.n	8001818 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017da:	f7ff f967 	bl	8000aac <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d302      	bcc.n	80017f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d113      	bne.n	8001818 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f4:	f043 0220 	orr.w	r2, r3, #32
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2220      	movs	r2, #32
 8001800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e007      	b.n	8001828 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b02      	cmp	r3, #2
 8001824:	d1cb      	bne.n	80017be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800183c:	e028      	b.n	8001890 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 f830 	bl	80018a8 <I2C_IsAcknowledgeFailed>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e026      	b.n	80018a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001852:	f7ff f92b 	bl	8000aac <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	429a      	cmp	r2, r3
 8001860:	d302      	bcc.n	8001868 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d113      	bne.n	8001890 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186c:	f043 0220 	orr.w	r2, r3, #32
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2220      	movs	r2, #32
 8001878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e007      	b.n	80018a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	f003 0320 	and.w	r3, r3, #32
 800189a:	2b20      	cmp	r3, #32
 800189c:	d1cf      	bne.n	800183e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f003 0310 	and.w	r3, r3, #16
 80018be:	2b10      	cmp	r3, #16
 80018c0:	d161      	bne.n	8001986 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018d0:	d02b      	beq.n	800192a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018e0:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018e2:	e022      	b.n	800192a <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ea:	d01e      	beq.n	800192a <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ec:	f7ff f8de 	bl	8000aac <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d302      	bcc.n	8001902 <I2C_IsAcknowledgeFailed+0x5a>
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d113      	bne.n	800192a <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f043 0220 	orr.w	r2, r3, #32
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2220      	movs	r2, #32
 8001912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e02e      	b.n	8001988 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0320 	and.w	r3, r3, #32
 8001934:	2b20      	cmp	r3, #32
 8001936:	d1d5      	bne.n	80018e4 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2210      	movs	r2, #16
 800193e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2220      	movs	r2, #32
 8001946:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f7ff fecd 	bl	80016e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6859      	ldr	r1, [r3, #4]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <I2C_IsAcknowledgeFailed+0xe8>)
 800195a:	400b      	ands	r3, r1
 800195c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f043 0204 	orr.w	r2, r3, #4
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2220      	movs	r2, #32
 800196e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	fe00e800 	.word	0xfe00e800

08001994 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	460b      	mov	r3, r1
 80019a0:	817b      	strh	r3, [r7, #10]
 80019a2:	4613      	mov	r3, r2
 80019a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	0d5b      	lsrs	r3, r3, #21
 80019b0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80019b4:	4b0d      	ldr	r3, [pc, #52]	; (80019ec <I2C_TransferConfig+0x58>)
 80019b6:	430b      	orrs	r3, r1
 80019b8:	43db      	mvns	r3, r3
 80019ba:	ea02 0103 	and.w	r1, r2, r3
 80019be:	897b      	ldrh	r3, [r7, #10]
 80019c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019c4:	7a7b      	ldrb	r3, [r7, #9]
 80019c6:	041b      	lsls	r3, r3, #16
 80019c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	431a      	orrs	r2, r3
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	431a      	orrs	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	03ff63ff 	.word	0x03ff63ff

080019f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b20      	cmp	r3, #32
 8001a04:	d138      	bne.n	8001a78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a10:	2302      	movs	r3, #2
 8001a12:	e032      	b.n	8001a7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2224      	movs	r2, #36	; 0x24
 8001a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6819      	ldr	r1, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2220      	movs	r2, #32
 8001a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	e000      	b.n	8001a7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a78:	2302      	movs	r3, #2
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b085      	sub	sp, #20
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b20      	cmp	r3, #32
 8001a9a:	d139      	bne.n	8001b10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e033      	b.n	8001b12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2224      	movs	r2, #36	; 0x24
 8001ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0201 	bic.w	r2, r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ad8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0201 	orr.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2220      	movs	r2, #32
 8001b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	e000      	b.n	8001b12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b10:	2302      	movs	r3, #2
  }
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4905      	ldr	r1, [pc, #20]	; (8001b5c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	600b      	str	r3, [r1, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40010000 	.word	0x40010000

08001b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	f000 bf01 	b.w	800297c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 8160 	beq.w	8001e4a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b8a:	4bae      	ldr	r3, [pc, #696]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d00c      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b96:	4bab      	ldr	r3, [pc, #684]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d159      	bne.n	8001c56 <HAL_RCC_OscConfig+0xf6>
 8001ba2:	4ba8      	ldr	r3, [pc, #672]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bae:	d152      	bne.n	8001c56 <HAL_RCC_OscConfig+0xf6>
 8001bb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bc4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d102      	bne.n	8001be2 <HAL_RCC_OscConfig+0x82>
 8001bdc:	4b99      	ldr	r3, [pc, #612]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	e015      	b.n	8001c0e <HAL_RCC_OscConfig+0xae>
 8001be2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001bf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bfa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001bfe:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c0a:	4b8e      	ldr	r3, [pc, #568]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c12:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001c16:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001c1a:	fa92 f2a2 	rbit	r2, r2
 8001c1e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001c22:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c26:	fab2 f282 	clz	r2, r2
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	f042 0220 	orr.w	r2, r2, #32
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	f002 021f 	and.w	r2, r2, #31
 8001c36:	2101      	movs	r1, #1
 8001c38:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 8102 	beq.w	8001e48 <HAL_RCC_OscConfig+0x2e8>
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f040 80fc 	bne.w	8001e48 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	f000 be93 	b.w	800297c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c60:	d106      	bne.n	8001c70 <HAL_RCC_OscConfig+0x110>
 8001c62:	4b78      	ldr	r3, [pc, #480]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a77      	ldr	r2, [pc, #476]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e030      	b.n	8001cd2 <HAL_RCC_OscConfig+0x172>
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x134>
 8001c7a:	4b72      	ldr	r3, [pc, #456]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a71      	ldr	r2, [pc, #452]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b6f      	ldr	r3, [pc, #444]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a6e      	ldr	r2, [pc, #440]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001c8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	e01e      	b.n	8001cd2 <HAL_RCC_OscConfig+0x172>
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c9e:	d10c      	bne.n	8001cba <HAL_RCC_OscConfig+0x15a>
 8001ca0:	4b68      	ldr	r3, [pc, #416]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a67      	ldr	r2, [pc, #412]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001ca6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b65      	ldr	r3, [pc, #404]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a64      	ldr	r2, [pc, #400]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb6:	6013      	str	r3, [r2, #0]
 8001cb8:	e00b      	b.n	8001cd2 <HAL_RCC_OscConfig+0x172>
 8001cba:	4b62      	ldr	r3, [pc, #392]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a61      	ldr	r2, [pc, #388]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b5f      	ldr	r3, [pc, #380]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a5e      	ldr	r2, [pc, #376]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001ccc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d059      	beq.n	8001d90 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7fe fee6 	bl	8000aac <HAL_GetTick>
 8001ce0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce6:	f7fe fee1 	bl	8000aac <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d902      	bls.n	8001cfc <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	f000 be40 	b.w	800297c <HAL_RCC_OscConfig+0xe1c>
 8001cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d00:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001d10:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d14:	fab3 f383 	clz	r3, r3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d102      	bne.n	8001d2e <HAL_RCC_OscConfig+0x1ce>
 8001d28:	4b46      	ldr	r3, [pc, #280]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	e015      	b.n	8001d5a <HAL_RCC_OscConfig+0x1fa>
 8001d2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d32:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d46:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d4a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d56:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d5e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001d62:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001d66:	fa92 f2a2 	rbit	r2, r2
 8001d6a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001d6e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d72:	fab2 f282 	clz	r2, r2
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	f042 0220 	orr.w	r2, r2, #32
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	f002 021f 	and.w	r2, r2, #31
 8001d82:	2101      	movs	r1, #1
 8001d84:	fa01 f202 	lsl.w	r2, r1, r2
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0ab      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x186>
 8001d8e:	e05c      	b.n	8001e4a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7fe fe8c 	bl	8000aac <HAL_GetTick>
 8001d94:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d98:	e00a      	b.n	8001db0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d9a:	f7fe fe87 	bl	8000aac <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	; 0x64
 8001da8:	d902      	bls.n	8001db0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	f000 bde6 	b.w	800297c <HAL_RCC_OscConfig+0xe1c>
 8001db0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001db4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001dc4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc8:	fab3 f383 	clz	r3, r3
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d102      	bne.n	8001de2 <HAL_RCC_OscConfig+0x282>
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	e015      	b.n	8001e0e <HAL_RCC_OscConfig+0x2ae>
 8001de2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001df6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001dfe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_RCC_OscConfig+0x2e4>)
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e12:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001e16:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001e1a:	fa92 f2a2 	rbit	r2, r2
 8001e1e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001e22:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e26:	fab2 f282 	clz	r2, r2
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	f042 0220 	orr.w	r2, r2, #32
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	f002 021f 	and.w	r2, r2, #31
 8001e36:	2101      	movs	r1, #1
 8001e38:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1ab      	bne.n	8001d9a <HAL_RCC_OscConfig+0x23a>
 8001e42:	e002      	b.n	8001e4a <HAL_RCC_OscConfig+0x2ea>
 8001e44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 8170 	beq.w	800213a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e5a:	4bd0      	ldr	r3, [pc, #832]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00c      	beq.n	8001e80 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e66:	4bcd      	ldr	r3, [pc, #820]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d16d      	bne.n	8001f4e <HAL_RCC_OscConfig+0x3ee>
 8001e72:	4bca      	ldr	r3, [pc, #808]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e7e:	d166      	bne.n	8001f4e <HAL_RCC_OscConfig+0x3ee>
 8001e80:	2302      	movs	r3, #2
 8001e82:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001e92:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	095b      	lsrs	r3, r3, #5
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d102      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x350>
 8001eaa:	4bbc      	ldr	r3, [pc, #752]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	e013      	b.n	8001ed8 <HAL_RCC_OscConfig+0x378>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ec8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ed4:	4bb1      	ldr	r3, [pc, #708]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	2202      	movs	r2, #2
 8001eda:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001ede:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001ee2:	fa92 f2a2 	rbit	r2, r2
 8001ee6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001eea:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001eee:	fab2 f282 	clz	r2, r2
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	f042 0220 	orr.w	r2, r2, #32
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	f002 021f 	and.w	r2, r2, #31
 8001efe:	2101      	movs	r1, #1
 8001f00:	fa01 f202 	lsl.w	r2, r1, r2
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d007      	beq.n	8001f1a <HAL_RCC_OscConfig+0x3ba>
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d002      	beq.n	8001f1a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	f000 bd31 	b.w	800297c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1a:	4ba0      	ldr	r3, [pc, #640]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	21f8      	movs	r1, #248	; 0xf8
 8001f2a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001f32:	fa91 f1a1 	rbit	r1, r1
 8001f36:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001f3a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001f3e:	fab1 f181 	clz	r1, r1
 8001f42:	b2c9      	uxtb	r1, r1
 8001f44:	408b      	lsls	r3, r1
 8001f46:	4995      	ldr	r1, [pc, #596]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4c:	e0f5      	b.n	800213a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8085 	beq.w	8002064 <HAL_RCC_OscConfig+0x504>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001f6c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	461a      	mov	r2, r3
 8001f82:	2301      	movs	r3, #1
 8001f84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7fe fd91 	bl	8000aac <HAL_GetTick>
 8001f8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f90:	f7fe fd8c 	bl	8000aac <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d902      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	f000 bceb 	b.w	800297c <HAL_RCC_OscConfig+0xe1c>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001fb8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbc:	fab3 f383 	clz	r3, r3
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d102      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x476>
 8001fd0:	4b72      	ldr	r3, [pc, #456]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	e013      	b.n	8001ffe <HAL_RCC_OscConfig+0x49e>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001fe8:	2302      	movs	r3, #2
 8001fea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001fee:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ffa:	4b68      	ldr	r3, [pc, #416]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	2202      	movs	r2, #2
 8002000:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002004:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002008:	fa92 f2a2 	rbit	r2, r2
 800200c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002010:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002014:	fab2 f282 	clz	r2, r2
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f042 0220 	orr.w	r2, r2, #32
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	f002 021f 	and.w	r2, r2, #31
 8002024:	2101      	movs	r1, #1
 8002026:	fa01 f202 	lsl.w	r2, r1, r2
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0af      	beq.n	8001f90 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002030:	4b5a      	ldr	r3, [pc, #360]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	21f8      	movs	r1, #248	; 0xf8
 8002040:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002048:	fa91 f1a1 	rbit	r1, r1
 800204c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002050:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002054:	fab1 f181 	clz	r1, r1
 8002058:	b2c9      	uxtb	r1, r1
 800205a:	408b      	lsls	r3, r1
 800205c:	494f      	ldr	r1, [pc, #316]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
 8002062:	e06a      	b.n	800213a <HAL_RCC_OscConfig+0x5da>
 8002064:	2301      	movs	r3, #1
 8002066:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002076:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002084:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	461a      	mov	r2, r3
 800208c:	2300      	movs	r3, #0
 800208e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7fe fd0c 	bl	8000aac <HAL_GetTick>
 8002094:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002098:	e00a      	b.n	80020b0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800209a:	f7fe fd07 	bl	8000aac <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d902      	bls.n	80020b0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	f000 bc66 	b.w	800297c <HAL_RCC_OscConfig+0xe1c>
 80020b0:	2302      	movs	r3, #2
 80020b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80020c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	095b      	lsrs	r3, r3, #5
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d102      	bne.n	80020e0 <HAL_RCC_OscConfig+0x580>
 80020da:	4b30      	ldr	r3, [pc, #192]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	e013      	b.n	8002108 <HAL_RCC_OscConfig+0x5a8>
 80020e0:	2302      	movs	r3, #2
 80020e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80020f2:	2302      	movs	r3, #2
 80020f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80020f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80020fc:	fa93 f3a3 	rbit	r3, r3
 8002100:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002104:	4b25      	ldr	r3, [pc, #148]	; (800219c <HAL_RCC_OscConfig+0x63c>)
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	2202      	movs	r2, #2
 800210a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800210e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002112:	fa92 f2a2 	rbit	r2, r2
 8002116:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800211a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800211e:	fab2 f282 	clz	r2, r2
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	f042 0220 	orr.w	r2, r2, #32
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	f002 021f 	and.w	r2, r2, #31
 800212e:	2101      	movs	r1, #1
 8002130:	fa01 f202 	lsl.w	r2, r1, r2
 8002134:	4013      	ands	r3, r2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1af      	bne.n	800209a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80da 	beq.w	80022fe <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d069      	beq.n	8002228 <HAL_RCC_OscConfig+0x6c8>
 8002154:	2301      	movs	r3, #1
 8002156:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002166:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	461a      	mov	r2, r3
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCC_OscConfig+0x640>)
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	461a      	mov	r2, r3
 800217a:	2301      	movs	r3, #1
 800217c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217e:	f7fe fc95 	bl	8000aac <HAL_GetTick>
 8002182:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002186:	e00d      	b.n	80021a4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002188:	f7fe fc90 	bl	8000aac <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d905      	bls.n	80021a4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e3ef      	b.n	800297c <HAL_RCC_OscConfig+0xe1c>
 800219c:	40021000 	.word	0x40021000
 80021a0:	10908120 	.word	0x10908120
 80021a4:	2302      	movs	r3, #2
 80021a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80021ae:	fa93 f2a3 	rbit	r2, r3
 80021b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80021bc:	2202      	movs	r2, #2
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	fa93 f2a3 	rbit	r2, r3
 80021ca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80021d4:	2202      	movs	r2, #2
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	fa93 f2a3 	rbit	r2, r3
 80021e2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80021e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e8:	4ba4      	ldr	r3, [pc, #656]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80021ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80021f0:	2102      	movs	r1, #2
 80021f2:	6019      	str	r1, [r3, #0]
 80021f4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	fa93 f1a3 	rbit	r1, r3
 80021fe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002202:	6019      	str	r1, [r3, #0]
  return result;
 8002204:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	2101      	movs	r1, #1
 800221c:	fa01 f303 	lsl.w	r3, r1, r3
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0b0      	beq.n	8002188 <HAL_RCC_OscConfig+0x628>
 8002226:	e06a      	b.n	80022fe <HAL_RCC_OscConfig+0x79e>
 8002228:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800222c:	2201      	movs	r2, #1
 800222e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	fa93 f2a3 	rbit	r2, r3
 800223a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800223e:	601a      	str	r2, [r3, #0]
  return result;
 8002240:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002244:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	4b8c      	ldr	r3, [pc, #560]	; (8002480 <HAL_RCC_OscConfig+0x920>)
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	461a      	mov	r2, r3
 8002256:	2300      	movs	r3, #0
 8002258:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7fe fc27 	bl	8000aac <HAL_GetTick>
 800225e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002262:	e009      	b.n	8002278 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002264:	f7fe fc22 	bl	8000aac <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e381      	b.n	800297c <HAL_RCC_OscConfig+0xe1c>
 8002278:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800227c:	2202      	movs	r2, #2
 800227e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	fa93 f2a3 	rbit	r2, r3
 800228a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002294:	2202      	movs	r2, #2
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	fa93 f2a3 	rbit	r2, r3
 80022a2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022ac:	2202      	movs	r2, #2
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	fa93 f2a3 	rbit	r2, r3
 80022ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80022be:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c0:	4b6e      	ldr	r3, [pc, #440]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80022c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022c8:	2102      	movs	r1, #2
 80022ca:	6019      	str	r1, [r3, #0]
 80022cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	fa93 f1a3 	rbit	r1, r3
 80022d6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022da:	6019      	str	r1, [r3, #0]
  return result;
 80022dc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f003 031f 	and.w	r3, r3, #31
 80022f2:	2101      	movs	r1, #1
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1b2      	bne.n	8002264 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 8157 	beq.w	80025bc <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002314:	4b59      	ldr	r3, [pc, #356]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d112      	bne.n	8002346 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002320:	4b56      	ldr	r3, [pc, #344]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	4a55      	ldr	r2, [pc, #340]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 8002326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232a:	61d3      	str	r3, [r2, #28]
 800232c:	4b53      	ldr	r3, [pc, #332]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002334:	f107 030c 	add.w	r3, r7, #12
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	f107 030c 	add.w	r3, r7, #12
 800233e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002340:	2301      	movs	r3, #1
 8002342:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002346:	4b4f      	ldr	r3, [pc, #316]	; (8002484 <HAL_RCC_OscConfig+0x924>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234e:	2b00      	cmp	r3, #0
 8002350:	d11a      	bne.n	8002388 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002352:	4b4c      	ldr	r3, [pc, #304]	; (8002484 <HAL_RCC_OscConfig+0x924>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a4b      	ldr	r2, [pc, #300]	; (8002484 <HAL_RCC_OscConfig+0x924>)
 8002358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235e:	f7fe fba5 	bl	8000aac <HAL_GetTick>
 8002362:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002366:	e009      	b.n	800237c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002368:	f7fe fba0 	bl	8000aac <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b64      	cmp	r3, #100	; 0x64
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e2ff      	b.n	800297c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237c:	4b41      	ldr	r3, [pc, #260]	; (8002484 <HAL_RCC_OscConfig+0x924>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0ef      	beq.n	8002368 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d106      	bne.n	80023a0 <HAL_RCC_OscConfig+0x840>
 8002392:	4b3a      	ldr	r3, [pc, #232]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4a39      	ldr	r2, [pc, #228]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6213      	str	r3, [r2, #32]
 800239e:	e02f      	b.n	8002400 <HAL_RCC_OscConfig+0x8a0>
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x864>
 80023aa:	4b34      	ldr	r3, [pc, #208]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4a33      	ldr	r2, [pc, #204]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023b0:	f023 0301 	bic.w	r3, r3, #1
 80023b4:	6213      	str	r3, [r2, #32]
 80023b6:	4b31      	ldr	r3, [pc, #196]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4a30      	ldr	r2, [pc, #192]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023bc:	f023 0304 	bic.w	r3, r3, #4
 80023c0:	6213      	str	r3, [r2, #32]
 80023c2:	e01d      	b.n	8002400 <HAL_RCC_OscConfig+0x8a0>
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b05      	cmp	r3, #5
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x888>
 80023ce:	4b2b      	ldr	r3, [pc, #172]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4a2a      	ldr	r2, [pc, #168]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	6213      	str	r3, [r2, #32]
 80023da:	4b28      	ldr	r3, [pc, #160]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	4a27      	ldr	r2, [pc, #156]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6213      	str	r3, [r2, #32]
 80023e6:	e00b      	b.n	8002400 <HAL_RCC_OscConfig+0x8a0>
 80023e8:	4b24      	ldr	r3, [pc, #144]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4a23      	ldr	r2, [pc, #140]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023ee:	f023 0301 	bic.w	r3, r3, #1
 80023f2:	6213      	str	r3, [r2, #32]
 80023f4:	4b21      	ldr	r3, [pc, #132]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4a20      	ldr	r2, [pc, #128]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 80023fa:	f023 0304 	bic.w	r3, r3, #4
 80023fe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d06a      	beq.n	80024e0 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240a:	f7fe fb4f 	bl	8000aac <HAL_GetTick>
 800240e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002412:	e00b      	b.n	800242c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f7fe fb4a 	bl	8000aac <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f241 3288 	movw	r2, #5000	; 0x1388
 8002424:	4293      	cmp	r3, r2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e2a7      	b.n	800297c <HAL_RCC_OscConfig+0xe1c>
 800242c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002430:	2202      	movs	r2, #2
 8002432:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	fa93 f2a3 	rbit	r2, r3
 800243e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002448:	2202      	movs	r2, #2
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	fa93 f2a3 	rbit	r2, r3
 8002456:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800245a:	601a      	str	r2, [r3, #0]
  return result;
 800245c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002460:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d108      	bne.n	8002488 <HAL_RCC_OscConfig+0x928>
 8002476:	4b01      	ldr	r3, [pc, #4]	; (800247c <HAL_RCC_OscConfig+0x91c>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	e013      	b.n	80024a4 <HAL_RCC_OscConfig+0x944>
 800247c:	40021000 	.word	0x40021000
 8002480:	10908120 	.word	0x10908120
 8002484:	40007000 	.word	0x40007000
 8002488:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800248c:	2202      	movs	r2, #2
 800248e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	fa93 f2a3 	rbit	r2, r3
 800249a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	4bc0      	ldr	r3, [pc, #768]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80024a8:	2102      	movs	r1, #2
 80024aa:	6011      	str	r1, [r2, #0]
 80024ac:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	fa92 f1a2 	rbit	r1, r2
 80024b6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024ba:	6011      	str	r1, [r2, #0]
  return result;
 80024bc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	fab2 f282 	clz	r2, r2
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	f002 021f 	and.w	r2, r2, #31
 80024d2:	2101      	movs	r1, #1
 80024d4:	fa01 f202 	lsl.w	r2, r1, r2
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d09a      	beq.n	8002414 <HAL_RCC_OscConfig+0x8b4>
 80024de:	e063      	b.n	80025a8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e0:	f7fe fae4 	bl	8000aac <HAL_GetTick>
 80024e4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e8:	e00b      	b.n	8002502 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ea:	f7fe fadf 	bl	8000aac <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e23c      	b.n	800297c <HAL_RCC_OscConfig+0xe1c>
 8002502:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002506:	2202      	movs	r2, #2
 8002508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	fa93 f2a3 	rbit	r2, r3
 8002514:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800251e:	2202      	movs	r2, #2
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	fa93 f2a3 	rbit	r2, r3
 800252c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002530:	601a      	str	r2, [r3, #0]
  return result;
 8002532:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002536:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f043 0302 	orr.w	r3, r3, #2
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d102      	bne.n	8002552 <HAL_RCC_OscConfig+0x9f2>
 800254c:	4b95      	ldr	r3, [pc, #596]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	e00d      	b.n	800256e <HAL_RCC_OscConfig+0xa0e>
 8002552:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002556:	2202      	movs	r2, #2
 8002558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	4b8e      	ldr	r3, [pc, #568]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002572:	2102      	movs	r1, #2
 8002574:	6011      	str	r1, [r2, #0]
 8002576:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	fa92 f1a2 	rbit	r1, r2
 8002580:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002584:	6011      	str	r1, [r2, #0]
  return result;
 8002586:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	fab2 f282 	clz	r2, r2
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	f002 021f 	and.w	r2, r2, #31
 800259c:	2101      	movs	r1, #1
 800259e:	fa01 f202 	lsl.w	r2, r1, r2
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1a0      	bne.n	80024ea <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025a8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d105      	bne.n	80025bc <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b0:	4b7c      	ldr	r3, [pc, #496]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	4a7b      	ldr	r2, [pc, #492]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80025b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 81d9 	beq.w	800297a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c8:	4b76      	ldr	r3, [pc, #472]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	f000 81a6 	beq.w	8002922 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	f040 811e 	bne.w	800281e <HAL_RCC_OscConfig+0xcbe>
 80025e2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80025e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ec:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	fa93 f2a3 	rbit	r2, r3
 80025f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80025fa:	601a      	str	r2, [r3, #0]
  return result;
 80025fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002600:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002602:	fab3 f383 	clz	r3, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800260c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	461a      	mov	r2, r3
 8002614:	2300      	movs	r3, #0
 8002616:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7fe fa48 	bl	8000aac <HAL_GetTick>
 800261c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002620:	e009      	b.n	8002636 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002622:	f7fe fa43 	bl	8000aac <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e1a2      	b.n	800297c <HAL_RCC_OscConfig+0xe1c>
 8002636:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800263a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800263e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	fa93 f2a3 	rbit	r2, r3
 800264a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800264e:	601a      	str	r2, [r3, #0]
  return result;
 8002650:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002654:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	095b      	lsrs	r3, r3, #5
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b01      	cmp	r3, #1
 8002668:	d102      	bne.n	8002670 <HAL_RCC_OscConfig+0xb10>
 800266a:	4b4e      	ldr	r3, [pc, #312]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	e01b      	b.n	80026a8 <HAL_RCC_OscConfig+0xb48>
 8002670:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002674:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	fa93 f2a3 	rbit	r2, r3
 8002684:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800268e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	fa93 f2a3 	rbit	r2, r3
 800269e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	4b3f      	ldr	r3, [pc, #252]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80026ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026b0:	6011      	str	r1, [r2, #0]
 80026b2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	fa92 f1a2 	rbit	r1, r2
 80026bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026c0:	6011      	str	r1, [r2, #0]
  return result;
 80026c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	fab2 f282 	clz	r2, r2
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	f042 0220 	orr.w	r2, r2, #32
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	f002 021f 	and.w	r2, r2, #31
 80026d8:	2101      	movs	r1, #1
 80026da:	fa01 f202 	lsl.w	r2, r1, r2
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d19e      	bne.n	8002622 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e4:	4b2f      	ldr	r3, [pc, #188]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	f023 020f 	bic.w	r2, r3, #15
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	492c      	ldr	r1, [pc, #176]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80026f8:	4b2a      	ldr	r3, [pc, #168]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6a19      	ldr	r1, [r3, #32]
 8002706:	1d3b      	adds	r3, r7, #4
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	430b      	orrs	r3, r1
 800270e:	4925      	ldr	r1, [pc, #148]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]
 8002714:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002718:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800271c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	fa93 f2a3 	rbit	r2, r3
 8002728:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800272c:	601a      	str	r2, [r3, #0]
  return result;
 800272e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002732:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800273e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	461a      	mov	r2, r3
 8002746:	2301      	movs	r3, #1
 8002748:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe f9af 	bl	8000aac <HAL_GetTick>
 800274e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002752:	e009      	b.n	8002768 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002754:	f7fe f9aa 	bl	8000aac <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e109      	b.n	800297c <HAL_RCC_OscConfig+0xe1c>
 8002768:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800276c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	fa93 f2a3 	rbit	r2, r3
 800277c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002780:	601a      	str	r2, [r3, #0]
  return result;
 8002782:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002786:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002788:	fab3 f383 	clz	r3, r3
 800278c:	b2db      	uxtb	r3, r3
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	b2db      	uxtb	r3, r3
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_RCC_OscConfig+0xc48>
 800279c:	4b01      	ldr	r3, [pc, #4]	; (80027a4 <HAL_RCC_OscConfig+0xc44>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	e01e      	b.n	80027e0 <HAL_RCC_OscConfig+0xc80>
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000
 80027a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	fa93 f2a3 	rbit	r2, r3
 80027bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	fa93 f2a3 	rbit	r2, r3
 80027d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	4b6a      	ldr	r3, [pc, #424]	; (8002988 <HAL_RCC_OscConfig+0xe28>)
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80027e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027e8:	6011      	str	r1, [r2, #0]
 80027ea:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	fa92 f1a2 	rbit	r1, r2
 80027f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027f8:	6011      	str	r1, [r2, #0]
  return result;
 80027fa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	fab2 f282 	clz	r2, r2
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	f042 0220 	orr.w	r2, r2, #32
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	f002 021f 	and.w	r2, r2, #31
 8002810:	2101      	movs	r1, #1
 8002812:	fa01 f202 	lsl.w	r2, r1, r2
 8002816:	4013      	ands	r3, r2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d09b      	beq.n	8002754 <HAL_RCC_OscConfig+0xbf4>
 800281c:	e0ad      	b.n	800297a <HAL_RCC_OscConfig+0xe1a>
 800281e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002822:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	fa93 f2a3 	rbit	r2, r3
 8002832:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002836:	601a      	str	r2, [r3, #0]
  return result;
 8002838:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800283c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002848:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	461a      	mov	r2, r3
 8002850:	2300      	movs	r3, #0
 8002852:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe f92a 	bl	8000aac <HAL_GetTick>
 8002858:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285c:	e009      	b.n	8002872 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe f925 	bl	8000aac <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e084      	b.n	800297c <HAL_RCC_OscConfig+0xe1c>
 8002872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002876:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800287a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	fa93 f2a3 	rbit	r2, r3
 8002886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800288a:	601a      	str	r2, [r3, #0]
  return result;
 800288c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002890:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	b2db      	uxtb	r3, r3
 8002898:	095b      	lsrs	r3, r3, #5
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d102      	bne.n	80028ac <HAL_RCC_OscConfig+0xd4c>
 80028a6:	4b38      	ldr	r3, [pc, #224]	; (8002988 <HAL_RCC_OscConfig+0xe28>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	e01b      	b.n	80028e4 <HAL_RCC_OscConfig+0xd84>
 80028ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	fa93 f2a3 	rbit	r2, r3
 80028c0:	f107 0320 	add.w	r3, r7, #32
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	f107 031c 	add.w	r3, r7, #28
 80028ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f107 031c 	add.w	r3, r7, #28
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	fa93 f2a3 	rbit	r2, r3
 80028da:	f107 0318 	add.w	r3, r7, #24
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	4b29      	ldr	r3, [pc, #164]	; (8002988 <HAL_RCC_OscConfig+0xe28>)
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	f107 0214 	add.w	r2, r7, #20
 80028e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028ec:	6011      	str	r1, [r2, #0]
 80028ee:	f107 0214 	add.w	r2, r7, #20
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	fa92 f1a2 	rbit	r1, r2
 80028f8:	f107 0210 	add.w	r2, r7, #16
 80028fc:	6011      	str	r1, [r2, #0]
  return result;
 80028fe:	f107 0210 	add.w	r2, r7, #16
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	fab2 f282 	clz	r2, r2
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	f042 0220 	orr.w	r2, r2, #32
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	f002 021f 	and.w	r2, r2, #31
 8002914:	2101      	movs	r1, #1
 8002916:	fa01 f202 	lsl.w	r2, r1, r2
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d19e      	bne.n	800285e <HAL_RCC_OscConfig+0xcfe>
 8002920:	e02b      	b.n	800297a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e025      	b.n	800297c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002930:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_RCC_OscConfig+0xe28>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002938:	4b13      	ldr	r3, [pc, #76]	; (8002988 <HAL_RCC_OscConfig+0xe28>)
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002940:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002944:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	429a      	cmp	r2, r3
 8002950:	d111      	bne.n	8002976 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002952:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002956:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002960:	429a      	cmp	r2, r3
 8002962:	d108      	bne.n	8002976 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002964:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002968:	f003 020f 	and.w	r2, r3, #15
 800296c:	1d3b      	adds	r3, r7, #4
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002972:	429a      	cmp	r2, r3
 8002974:	d001      	beq.n	800297a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000

0800298c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b09e      	sub	sp, #120	; 0x78
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e162      	b.n	8002c6a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a4:	4b90      	ldr	r3, [pc, #576]	; (8002be8 <HAL_RCC_ClockConfig+0x25c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d910      	bls.n	80029d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b8d      	ldr	r3, [pc, #564]	; (8002be8 <HAL_RCC_ClockConfig+0x25c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 0207 	bic.w	r2, r3, #7
 80029ba:	498b      	ldr	r1, [pc, #556]	; (8002be8 <HAL_RCC_ClockConfig+0x25c>)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b89      	ldr	r3, [pc, #548]	; (8002be8 <HAL_RCC_ClockConfig+0x25c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e14a      	b.n	8002c6a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e0:	4b82      	ldr	r3, [pc, #520]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	497f      	ldr	r1, [pc, #508]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80dc 	beq.w	8002bb8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d13c      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xf6>
 8002a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a0c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a18:	fab3 f383 	clz	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d102      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xa6>
 8002a2c:	4b6f      	ldr	r3, [pc, #444]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	e00f      	b.n	8002a52 <HAL_RCC_ClockConfig+0xc6>
 8002a32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	667b      	str	r3, [r7, #100]	; 0x64
 8002a40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a44:	663b      	str	r3, [r7, #96]	; 0x60
 8002a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a4e:	4b67      	ldr	r3, [pc, #412]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a56:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a5a:	fa92 f2a2 	rbit	r2, r2
 8002a5e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a62:	fab2 f282 	clz	r2, r2
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	f042 0220 	orr.w	r2, r2, #32
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	f002 021f 	and.w	r2, r2, #31
 8002a72:	2101      	movs	r1, #1
 8002a74:	fa01 f202 	lsl.w	r2, r1, r2
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d17b      	bne.n	8002b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e0f3      	b.n	8002c6a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d13c      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x178>
 8002a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a8e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d102      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x128>
 8002aae:	4b4f      	ldr	r3, [pc, #316]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	e00f      	b.n	8002ad4 <HAL_RCC_ClockConfig+0x148>
 8002ab4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ab8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ac2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ac6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ad0:	4b46      	ldr	r3, [pc, #280]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ad8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002adc:	fa92 f2a2 	rbit	r2, r2
 8002ae0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002ae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ae4:	fab2 f282 	clz	r2, r2
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	f042 0220 	orr.w	r2, r2, #32
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	f002 021f 	and.w	r2, r2, #31
 8002af4:	2101      	movs	r1, #1
 8002af6:	fa01 f202 	lsl.w	r2, r1, r2
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d13a      	bne.n	8002b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0b2      	b.n	8002c6a <HAL_RCC_ClockConfig+0x2de>
 8002b04:	2302      	movs	r3, #2
 8002b06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d102      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x1a0>
 8002b26:	4b31      	ldr	r3, [pc, #196]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	e00d      	b.n	8002b48 <HAL_RCC_ClockConfig+0x1bc>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	fa93 f3a3 	rbit	r3, r3
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
 8002b38:	2302      	movs	r3, #2
 8002b3a:	623b      	str	r3, [r7, #32]
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	61fb      	str	r3, [r7, #28]
 8002b44:	4b29      	ldr	r3, [pc, #164]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	2202      	movs	r2, #2
 8002b4a:	61ba      	str	r2, [r7, #24]
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	fa92 f2a2 	rbit	r2, r2
 8002b52:	617a      	str	r2, [r7, #20]
  return result;
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	fab2 f282 	clz	r2, r2
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	f042 0220 	orr.w	r2, r2, #32
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	f002 021f 	and.w	r2, r2, #31
 8002b66:	2101      	movs	r1, #1
 8002b68:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e079      	b.n	8002c6a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b76:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f023 0203 	bic.w	r2, r3, #3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	491a      	ldr	r1, [pc, #104]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b88:	f7fd ff90 	bl	8000aac <HAL_GetTick>
 8002b8c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b90:	f7fd ff8c 	bl	8000aac <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e061      	b.n	8002c6a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba6:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_RCC_ClockConfig+0x260>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 020c 	and.w	r2, r3, #12
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d1eb      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_RCC_ClockConfig+0x25c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d214      	bcs.n	8002bf0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc6:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <HAL_RCC_ClockConfig+0x25c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 0207 	bic.w	r2, r3, #7
 8002bce:	4906      	ldr	r1, [pc, #24]	; (8002be8 <HAL_RCC_ClockConfig+0x25c>)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd6:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <HAL_RCC_ClockConfig+0x25c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e040      	b.n	8002c6a <HAL_RCC_ClockConfig+0x2de>
 8002be8:	40022000 	.word	0x40022000
 8002bec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_RCC_ClockConfig+0x2e8>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	491a      	ldr	r1, [pc, #104]	; (8002c74 <HAL_RCC_ClockConfig+0x2e8>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d009      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c1a:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <HAL_RCC_ClockConfig+0x2e8>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4912      	ldr	r1, [pc, #72]	; (8002c74 <HAL_RCC_ClockConfig+0x2e8>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c2e:	f000 f829 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8002c32:	4601      	mov	r1, r0
 8002c34:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <HAL_RCC_ClockConfig+0x2e8>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c3c:	22f0      	movs	r2, #240	; 0xf0
 8002c3e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	fa92 f2a2 	rbit	r2, r2
 8002c46:	60fa      	str	r2, [r7, #12]
  return result;
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	fab2 f282 	clz	r2, r2
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	40d3      	lsrs	r3, r2
 8002c52:	4a09      	ldr	r2, [pc, #36]	; (8002c78 <HAL_RCC_ClockConfig+0x2ec>)
 8002c54:	5cd3      	ldrb	r3, [r2, r3]
 8002c56:	fa21 f303 	lsr.w	r3, r1, r3
 8002c5a:	4a08      	ldr	r2, [pc, #32]	; (8002c7c <HAL_RCC_ClockConfig+0x2f0>)
 8002c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <HAL_RCC_ClockConfig+0x2f4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fede 	bl	8000a24 <HAL_InitTick>
  
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3778      	adds	r7, #120	; 0x78
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	08003a4c 	.word	0x08003a4c
 8002c7c:	20000020 	.word	0x20000020
 8002c80:	20000024 	.word	0x20000024

08002c84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b08b      	sub	sp, #44	; 0x2c
 8002c88:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	2300      	movs	r3, #0
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c9e:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d002      	beq.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x30>
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d003      	beq.n	8002cba <HAL_RCC_GetSysClockFreq+0x36>
 8002cb2:	e03f      	b.n	8002d34 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cb4:	4b25      	ldr	r3, [pc, #148]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cb6:	623b      	str	r3, [r7, #32]
      break;
 8002cb8:	e03f      	b.n	8002d3a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002cc0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002cc4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	fa92 f2a2 	rbit	r2, r2
 8002ccc:	607a      	str	r2, [r7, #4]
  return result;
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	fab2 f282 	clz	r2, r2
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	40d3      	lsrs	r3, r2
 8002cd8:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cda:	5cd3      	ldrb	r3, [r2, r3]
 8002cdc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002cde:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	220f      	movs	r2, #15
 8002ce8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	fa92 f2a2 	rbit	r2, r2
 8002cf0:	60fa      	str	r2, [r7, #12]
  return result;
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	fab2 f282 	clz	r2, r2
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	40d3      	lsrs	r3, r2
 8002cfc:	4a15      	ldr	r2, [pc, #84]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cfe:	5cd3      	ldrb	r3, [r2, r3]
 8002d00:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d0c:	4a0f      	ldr	r2, [pc, #60]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	fb02 f303 	mul.w	r3, r2, r3
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1c:	e007      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d1e:	4a0b      	ldr	r2, [pc, #44]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	fb02 f303 	mul.w	r3, r2, r3
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	623b      	str	r3, [r7, #32]
      break;
 8002d32:	e002      	b.n	8002d3a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d36:	623b      	str	r3, [r7, #32]
      break;
 8002d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	372c      	adds	r7, #44	; 0x2c
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	007a1200 	.word	0x007a1200
 8002d50:	08003a64 	.word	0x08003a64
 8002d54:	08003a74 	.word	0x08003a74

08002d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	20000020 	.word	0x20000020

08002d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d76:	f7ff ffef 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8002d7a:	4601      	mov	r1, r0
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d84:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d88:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	fa92 f2a2 	rbit	r2, r2
 8002d90:	603a      	str	r2, [r7, #0]
  return result;
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	fab2 f282 	clz	r2, r2
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	40d3      	lsrs	r3, r2
 8002d9c:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d9e:	5cd3      	ldrb	r3, [r2, r3]
 8002da0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000
 8002db0:	08003a5c 	.word	0x08003a5c

08002db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002dba:	f7ff ffcd 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8002dbe:	4601      	mov	r1, r0
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002dc8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002dcc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	fa92 f2a2 	rbit	r2, r2
 8002dd4:	603a      	str	r2, [r7, #0]
  return result;
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	fab2 f282 	clz	r2, r2
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	40d3      	lsrs	r3, r2
 8002de0:	4a04      	ldr	r2, [pc, #16]	; (8002df4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002de2:	5cd3      	ldrb	r3, [r2, r3]
 8002de4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	08003a5c 	.word	0x08003a5c

08002df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b092      	sub	sp, #72	; 0x48
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 80d4 	beq.w	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1c:	4b4e      	ldr	r3, [pc, #312]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10e      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e28:	4b4b      	ldr	r3, [pc, #300]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	4a4a      	ldr	r2, [pc, #296]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e32:	61d3      	str	r3, [r2, #28]
 8002e34:	4b48      	ldr	r3, [pc, #288]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e40:	2301      	movs	r3, #1
 8002e42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e46:	4b45      	ldr	r3, [pc, #276]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d118      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e52:	4b42      	ldr	r3, [pc, #264]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a41      	ldr	r2, [pc, #260]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5e:	f7fd fe25 	bl	8000aac <HAL_GetTick>
 8002e62:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	e008      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e66:	f7fd fe21 	bl	8000aac <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b64      	cmp	r3, #100	; 0x64
 8002e72:	d901      	bls.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e1d6      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	4b38      	ldr	r3, [pc, #224]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e84:	4b34      	ldr	r3, [pc, #208]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 8084 	beq.w	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d07c      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ea4:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb6:	fa93 f3a3 	rbit	r3, r3
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ebe:	fab3 f383 	clz	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b26      	ldr	r3, [pc, #152]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2301      	movs	r3, #1
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ed6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ee2:	fab3 f383 	clz	r3, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ef6:	4a18      	ldr	r2, [pc, #96]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002efa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d04b      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f06:	f7fd fdd1 	bl	8000aac <HAL_GetTick>
 8002f0a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f7fd fdcd 	bl	8000aac <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e180      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002f24:	2302      	movs	r3, #2
 8002f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2a:	fa93 f3a3 	rbit	r3, r3
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f30:	2302      	movs	r3, #2
 8002f32:	623b      	str	r3, [r7, #32]
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	61fb      	str	r3, [r7, #28]
  return result;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	f043 0302 	orr.w	r3, r3, #2
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d108      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002f52:	4b01      	ldr	r3, [pc, #4]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	e00d      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40007000 	.word	0x40007000
 8002f60:	10908100 	.word	0x10908100
 8002f64:	2302      	movs	r3, #2
 8002f66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	4ba0      	ldr	r3, [pc, #640]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	2202      	movs	r2, #2
 8002f76:	613a      	str	r2, [r7, #16]
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	fa92 f2a2 	rbit	r2, r2
 8002f7e:	60fa      	str	r2, [r7, #12]
  return result;
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	fab2 f282 	clz	r2, r2
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	f002 021f 	and.w	r2, r2, #31
 8002f92:	2101      	movs	r1, #1
 8002f94:	fa01 f202 	lsl.w	r2, r1, r2
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0b7      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f9e:	4b95      	ldr	r3, [pc, #596]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4992      	ldr	r1, [pc, #584]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fb0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d105      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb8:	4b8e      	ldr	r3, [pc, #568]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	4a8d      	ldr	r2, [pc, #564]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fd0:	4b88      	ldr	r3, [pc, #544]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	f023 0203 	bic.w	r2, r3, #3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4985      	ldr	r1, [pc, #532]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fee:	4b81      	ldr	r3, [pc, #516]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	497e      	ldr	r1, [pc, #504]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800300c:	4b79      	ldr	r3, [pc, #484]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	4976      	ldr	r1, [pc, #472]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800301a:	4313      	orrs	r3, r2
 800301c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800302a:	4b72      	ldr	r3, [pc, #456]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f023 0210 	bic.w	r2, r3, #16
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	496f      	ldr	r1, [pc, #444]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003038:	4313      	orrs	r3, r2
 800303a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003048:	4b6a      	ldr	r3, [pc, #424]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003054:	4967      	ldr	r1, [pc, #412]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d008      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003066:	4b63      	ldr	r3, [pc, #396]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f023 0220 	bic.w	r2, r3, #32
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	4960      	ldr	r1, [pc, #384]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003074:	4313      	orrs	r3, r2
 8003076:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003084:	4b5b      	ldr	r3, [pc, #364]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	4958      	ldr	r1, [pc, #352]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003092:	4313      	orrs	r3, r2
 8003094:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030a2:	4b54      	ldr	r3, [pc, #336]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	4951      	ldr	r1, [pc, #324]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030c0:	4b4c      	ldr	r3, [pc, #304]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	4949      	ldr	r1, [pc, #292]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d008      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030de:	4b45      	ldr	r3, [pc, #276]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	4942      	ldr	r1, [pc, #264]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030fc:	4b3d      	ldr	r3, [pc, #244]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	493a      	ldr	r1, [pc, #232]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800310a:	4313      	orrs	r3, r2
 800310c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003116:	2b00      	cmp	r3, #0
 8003118:	d008      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800311a:	4b36      	ldr	r3, [pc, #216]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	4933      	ldr	r1, [pc, #204]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003128:	4313      	orrs	r3, r2
 800312a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003138:	4b2e      	ldr	r3, [pc, #184]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003144:	492b      	ldr	r1, [pc, #172]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003156:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	4924      	ldr	r1, [pc, #144]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003164:	4313      	orrs	r3, r2
 8003166:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003174:	4b1f      	ldr	r3, [pc, #124]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	491c      	ldr	r1, [pc, #112]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003182:	4313      	orrs	r3, r2
 8003184:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d008      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003192:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	4915      	ldr	r1, [pc, #84]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80031b0:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031bc:	490d      	ldr	r1, [pc, #52]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d008      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031da:	4906      	ldr	r1, [pc, #24]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00c      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80031ec:	4b01      	ldr	r3, [pc, #4]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	e002      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80031f2:	bf00      	nop
 80031f4:	40021000 	.word	0x40021000
 80031f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003200:	490b      	ldr	r1, [pc, #44]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003202:	4313      	orrs	r3, r2
 8003204:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d008      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003212:	4b07      	ldr	r3, [pc, #28]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800321e:	4904      	ldr	r1, [pc, #16]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003220:	4313      	orrs	r3, r2
 8003222:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3748      	adds	r7, #72	; 0x48
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000

08003234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e040      	b.n	80032c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fd fb62 	bl	8000920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	; 0x24
 8003260:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0201 	bic.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f82c 	bl	80032d0 <UART_SetConfig>
 8003278:	4603      	mov	r3, r0
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e022      	b.n	80032c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f9f6 	bl	800367c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800329e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fa7d 	bl	80037c0 <UART_CheckIdleState>
 80032c6:	4603      	mov	r3, r0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4bab      	ldr	r3, [pc, #684]	; (80035a8 <UART_SetConfig+0x2d8>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	6979      	ldr	r1, [r7, #20]
 8003304:	430b      	orrs	r3, r1
 8003306:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	430a      	orrs	r2, r1
 8003340:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a99      	ldr	r2, [pc, #612]	; (80035ac <UART_SetConfig+0x2dc>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d120      	bne.n	800338e <UART_SetConfig+0xbe>
 800334c:	4b98      	ldr	r3, [pc, #608]	; (80035b0 <UART_SetConfig+0x2e0>)
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	2b03      	cmp	r3, #3
 8003356:	d817      	bhi.n	8003388 <UART_SetConfig+0xb8>
 8003358:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <UART_SetConfig+0x90>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	08003371 	.word	0x08003371
 8003364:	0800337d 	.word	0x0800337d
 8003368:	08003383 	.word	0x08003383
 800336c:	08003377 	.word	0x08003377
 8003370:	2301      	movs	r3, #1
 8003372:	77fb      	strb	r3, [r7, #31]
 8003374:	e0b5      	b.n	80034e2 <UART_SetConfig+0x212>
 8003376:	2302      	movs	r3, #2
 8003378:	77fb      	strb	r3, [r7, #31]
 800337a:	e0b2      	b.n	80034e2 <UART_SetConfig+0x212>
 800337c:	2304      	movs	r3, #4
 800337e:	77fb      	strb	r3, [r7, #31]
 8003380:	e0af      	b.n	80034e2 <UART_SetConfig+0x212>
 8003382:	2308      	movs	r3, #8
 8003384:	77fb      	strb	r3, [r7, #31]
 8003386:	e0ac      	b.n	80034e2 <UART_SetConfig+0x212>
 8003388:	2310      	movs	r3, #16
 800338a:	77fb      	strb	r3, [r7, #31]
 800338c:	e0a9      	b.n	80034e2 <UART_SetConfig+0x212>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a88      	ldr	r2, [pc, #544]	; (80035b4 <UART_SetConfig+0x2e4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d124      	bne.n	80033e2 <UART_SetConfig+0x112>
 8003398:	4b85      	ldr	r3, [pc, #532]	; (80035b0 <UART_SetConfig+0x2e0>)
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033a4:	d011      	beq.n	80033ca <UART_SetConfig+0xfa>
 80033a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033aa:	d817      	bhi.n	80033dc <UART_SetConfig+0x10c>
 80033ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033b0:	d011      	beq.n	80033d6 <UART_SetConfig+0x106>
 80033b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033b6:	d811      	bhi.n	80033dc <UART_SetConfig+0x10c>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <UART_SetConfig+0xf4>
 80033bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c0:	d006      	beq.n	80033d0 <UART_SetConfig+0x100>
 80033c2:	e00b      	b.n	80033dc <UART_SetConfig+0x10c>
 80033c4:	2300      	movs	r3, #0
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	e08b      	b.n	80034e2 <UART_SetConfig+0x212>
 80033ca:	2302      	movs	r3, #2
 80033cc:	77fb      	strb	r3, [r7, #31]
 80033ce:	e088      	b.n	80034e2 <UART_SetConfig+0x212>
 80033d0:	2304      	movs	r3, #4
 80033d2:	77fb      	strb	r3, [r7, #31]
 80033d4:	e085      	b.n	80034e2 <UART_SetConfig+0x212>
 80033d6:	2308      	movs	r3, #8
 80033d8:	77fb      	strb	r3, [r7, #31]
 80033da:	e082      	b.n	80034e2 <UART_SetConfig+0x212>
 80033dc:	2310      	movs	r3, #16
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e07f      	b.n	80034e2 <UART_SetConfig+0x212>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a74      	ldr	r2, [pc, #464]	; (80035b8 <UART_SetConfig+0x2e8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d124      	bne.n	8003436 <UART_SetConfig+0x166>
 80033ec:	4b70      	ldr	r3, [pc, #448]	; (80035b0 <UART_SetConfig+0x2e0>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80033f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033f8:	d011      	beq.n	800341e <UART_SetConfig+0x14e>
 80033fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033fe:	d817      	bhi.n	8003430 <UART_SetConfig+0x160>
 8003400:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003404:	d011      	beq.n	800342a <UART_SetConfig+0x15a>
 8003406:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800340a:	d811      	bhi.n	8003430 <UART_SetConfig+0x160>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <UART_SetConfig+0x148>
 8003410:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003414:	d006      	beq.n	8003424 <UART_SetConfig+0x154>
 8003416:	e00b      	b.n	8003430 <UART_SetConfig+0x160>
 8003418:	2300      	movs	r3, #0
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e061      	b.n	80034e2 <UART_SetConfig+0x212>
 800341e:	2302      	movs	r3, #2
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e05e      	b.n	80034e2 <UART_SetConfig+0x212>
 8003424:	2304      	movs	r3, #4
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e05b      	b.n	80034e2 <UART_SetConfig+0x212>
 800342a:	2308      	movs	r3, #8
 800342c:	77fb      	strb	r3, [r7, #31]
 800342e:	e058      	b.n	80034e2 <UART_SetConfig+0x212>
 8003430:	2310      	movs	r3, #16
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e055      	b.n	80034e2 <UART_SetConfig+0x212>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a60      	ldr	r2, [pc, #384]	; (80035bc <UART_SetConfig+0x2ec>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d124      	bne.n	800348a <UART_SetConfig+0x1ba>
 8003440:	4b5b      	ldr	r3, [pc, #364]	; (80035b0 <UART_SetConfig+0x2e0>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003448:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800344c:	d011      	beq.n	8003472 <UART_SetConfig+0x1a2>
 800344e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003452:	d817      	bhi.n	8003484 <UART_SetConfig+0x1b4>
 8003454:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003458:	d011      	beq.n	800347e <UART_SetConfig+0x1ae>
 800345a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800345e:	d811      	bhi.n	8003484 <UART_SetConfig+0x1b4>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <UART_SetConfig+0x19c>
 8003464:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003468:	d006      	beq.n	8003478 <UART_SetConfig+0x1a8>
 800346a:	e00b      	b.n	8003484 <UART_SetConfig+0x1b4>
 800346c:	2300      	movs	r3, #0
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e037      	b.n	80034e2 <UART_SetConfig+0x212>
 8003472:	2302      	movs	r3, #2
 8003474:	77fb      	strb	r3, [r7, #31]
 8003476:	e034      	b.n	80034e2 <UART_SetConfig+0x212>
 8003478:	2304      	movs	r3, #4
 800347a:	77fb      	strb	r3, [r7, #31]
 800347c:	e031      	b.n	80034e2 <UART_SetConfig+0x212>
 800347e:	2308      	movs	r3, #8
 8003480:	77fb      	strb	r3, [r7, #31]
 8003482:	e02e      	b.n	80034e2 <UART_SetConfig+0x212>
 8003484:	2310      	movs	r3, #16
 8003486:	77fb      	strb	r3, [r7, #31]
 8003488:	e02b      	b.n	80034e2 <UART_SetConfig+0x212>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a4c      	ldr	r2, [pc, #304]	; (80035c0 <UART_SetConfig+0x2f0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d124      	bne.n	80034de <UART_SetConfig+0x20e>
 8003494:	4b46      	ldr	r3, [pc, #280]	; (80035b0 <UART_SetConfig+0x2e0>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800349c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034a0:	d011      	beq.n	80034c6 <UART_SetConfig+0x1f6>
 80034a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034a6:	d817      	bhi.n	80034d8 <UART_SetConfig+0x208>
 80034a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034ac:	d011      	beq.n	80034d2 <UART_SetConfig+0x202>
 80034ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034b2:	d811      	bhi.n	80034d8 <UART_SetConfig+0x208>
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <UART_SetConfig+0x1f0>
 80034b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034bc:	d006      	beq.n	80034cc <UART_SetConfig+0x1fc>
 80034be:	e00b      	b.n	80034d8 <UART_SetConfig+0x208>
 80034c0:	2300      	movs	r3, #0
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e00d      	b.n	80034e2 <UART_SetConfig+0x212>
 80034c6:	2302      	movs	r3, #2
 80034c8:	77fb      	strb	r3, [r7, #31]
 80034ca:	e00a      	b.n	80034e2 <UART_SetConfig+0x212>
 80034cc:	2304      	movs	r3, #4
 80034ce:	77fb      	strb	r3, [r7, #31]
 80034d0:	e007      	b.n	80034e2 <UART_SetConfig+0x212>
 80034d2:	2308      	movs	r3, #8
 80034d4:	77fb      	strb	r3, [r7, #31]
 80034d6:	e004      	b.n	80034e2 <UART_SetConfig+0x212>
 80034d8:	2310      	movs	r3, #16
 80034da:	77fb      	strb	r3, [r7, #31]
 80034dc:	e001      	b.n	80034e2 <UART_SetConfig+0x212>
 80034de:	2310      	movs	r3, #16
 80034e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ea:	d16d      	bne.n	80035c8 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 80034ec:	7ffb      	ldrb	r3, [r7, #31]
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d827      	bhi.n	8003542 <UART_SetConfig+0x272>
 80034f2:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <UART_SetConfig+0x228>)
 80034f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f8:	0800351d 	.word	0x0800351d
 80034fc:	08003525 	.word	0x08003525
 8003500:	0800352d 	.word	0x0800352d
 8003504:	08003543 	.word	0x08003543
 8003508:	08003533 	.word	0x08003533
 800350c:	08003543 	.word	0x08003543
 8003510:	08003543 	.word	0x08003543
 8003514:	08003543 	.word	0x08003543
 8003518:	0800353b 	.word	0x0800353b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800351c:	f7ff fc28 	bl	8002d70 <HAL_RCC_GetPCLK1Freq>
 8003520:	61b8      	str	r0, [r7, #24]
        break;
 8003522:	e013      	b.n	800354c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003524:	f7ff fc46 	bl	8002db4 <HAL_RCC_GetPCLK2Freq>
 8003528:	61b8      	str	r0, [r7, #24]
        break;
 800352a:	e00f      	b.n	800354c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800352c:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <UART_SetConfig+0x2f4>)
 800352e:	61bb      	str	r3, [r7, #24]
        break;
 8003530:	e00c      	b.n	800354c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003532:	f7ff fba7 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8003536:	61b8      	str	r0, [r7, #24]
        break;
 8003538:	e008      	b.n	800354c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800353e:	61bb      	str	r3, [r7, #24]
        break;
 8003540:	e004      	b.n	800354c <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	77bb      	strb	r3, [r7, #30]
        break;
 800354a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 8086 	beq.w	8003660 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	005a      	lsls	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	441a      	add	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	b29b      	uxth	r3, r3
 800356a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b0f      	cmp	r3, #15
 8003570:	d916      	bls.n	80035a0 <UART_SetConfig+0x2d0>
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003578:	d212      	bcs.n	80035a0 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	b29b      	uxth	r3, r3
 800357e:	f023 030f 	bic.w	r3, r3, #15
 8003582:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	085b      	lsrs	r3, r3, #1
 8003588:	b29b      	uxth	r3, r3
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	b29a      	uxth	r2, r3
 8003590:	89fb      	ldrh	r3, [r7, #14]
 8003592:	4313      	orrs	r3, r2
 8003594:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	89fa      	ldrh	r2, [r7, #14]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	e05f      	b.n	8003660 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	77bb      	strb	r3, [r7, #30]
 80035a4:	e05c      	b.n	8003660 <UART_SetConfig+0x390>
 80035a6:	bf00      	nop
 80035a8:	efff69f3 	.word	0xefff69f3
 80035ac:	40013800 	.word	0x40013800
 80035b0:	40021000 	.word	0x40021000
 80035b4:	40004400 	.word	0x40004400
 80035b8:	40004800 	.word	0x40004800
 80035bc:	40004c00 	.word	0x40004c00
 80035c0:	40005000 	.word	0x40005000
 80035c4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80035c8:	7ffb      	ldrb	r3, [r7, #31]
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d827      	bhi.n	800361e <UART_SetConfig+0x34e>
 80035ce:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <UART_SetConfig+0x304>)
 80035d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d4:	080035f9 	.word	0x080035f9
 80035d8:	08003601 	.word	0x08003601
 80035dc:	08003609 	.word	0x08003609
 80035e0:	0800361f 	.word	0x0800361f
 80035e4:	0800360f 	.word	0x0800360f
 80035e8:	0800361f 	.word	0x0800361f
 80035ec:	0800361f 	.word	0x0800361f
 80035f0:	0800361f 	.word	0x0800361f
 80035f4:	08003617 	.word	0x08003617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035f8:	f7ff fbba 	bl	8002d70 <HAL_RCC_GetPCLK1Freq>
 80035fc:	61b8      	str	r0, [r7, #24]
        break;
 80035fe:	e013      	b.n	8003628 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003600:	f7ff fbd8 	bl	8002db4 <HAL_RCC_GetPCLK2Freq>
 8003604:	61b8      	str	r0, [r7, #24]
        break;
 8003606:	e00f      	b.n	8003628 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003608:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <UART_SetConfig+0x3a8>)
 800360a:	61bb      	str	r3, [r7, #24]
        break;
 800360c:	e00c      	b.n	8003628 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800360e:	f7ff fb39 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8003612:	61b8      	str	r0, [r7, #24]
        break;
 8003614:	e008      	b.n	8003628 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800361a:	61bb      	str	r3, [r7, #24]
        break;
 800361c:	e004      	b.n	8003628 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	77bb      	strb	r3, [r7, #30]
        break;
 8003626:	bf00      	nop
    }

    if (pclk != 0U)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d018      	beq.n	8003660 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	085a      	lsrs	r2, r3, #1
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	441a      	add	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003640:	b29b      	uxth	r3, r3
 8003642:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	2b0f      	cmp	r3, #15
 8003648:	d908      	bls.n	800365c <UART_SetConfig+0x38c>
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003650:	d204      	bcs.n	800365c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	60da      	str	r2, [r3, #12]
 800365a:	e001      	b.n	8003660 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800366c:	7fbb      	ldrb	r3, [r7, #30]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	007a1200 	.word	0x007a1200

0800367c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00a      	beq.n	80036a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d01a      	beq.n	8003792 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800377a:	d10a      	bne.n	8003792 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	605a      	str	r2, [r3, #4]
  }
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037d0:	f7fd f96c 	bl	8000aac <HAL_GetTick>
 80037d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d10e      	bne.n	8003802 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f82d 	bl	8003852 <UART_WaitOnFlagUntilTimeout>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e023      	b.n	800384a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b04      	cmp	r3, #4
 800380e:	d10e      	bne.n	800382e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003810:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f817 	bl	8003852 <UART_WaitOnFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e00d      	b.n	800384a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b09c      	sub	sp, #112	; 0x70
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	603b      	str	r3, [r7, #0]
 800385e:	4613      	mov	r3, r2
 8003860:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003862:	e0a5      	b.n	80039b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386a:	f000 80a1 	beq.w	80039b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386e:	f7fd f91d 	bl	8000aac <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800387a:	429a      	cmp	r2, r3
 800387c:	d302      	bcc.n	8003884 <UART_WaitOnFlagUntilTimeout+0x32>
 800387e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003880:	2b00      	cmp	r3, #0
 8003882:	d13e      	bne.n	8003902 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003894:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003898:	667b      	str	r3, [r7, #100]	; 0x64
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80038a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80038b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1e6      	bne.n	8003884 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3308      	adds	r3, #8
 80038bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c0:	e853 3f00 	ldrex	r3, [r3]
 80038c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	663b      	str	r3, [r7, #96]	; 0x60
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3308      	adds	r3, #8
 80038d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80038d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1e5      	bne.n	80038b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2220      	movs	r2, #32
 80038ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e067      	b.n	80039d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d04f      	beq.n	80039b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800391a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800391e:	d147      	bne.n	80039b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003928:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003932:	e853 3f00 	ldrex	r3, [r3]
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800393e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003948:	637b      	str	r3, [r7, #52]	; 0x34
 800394a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800394e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e6      	bne.n	800392a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3308      	adds	r3, #8
 8003962:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	613b      	str	r3, [r7, #16]
   return(result);
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f023 0301 	bic.w	r3, r3, #1
 8003972:	66bb      	str	r3, [r7, #104]	; 0x68
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3308      	adds	r3, #8
 800397a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800397c:	623a      	str	r2, [r7, #32]
 800397e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	69f9      	ldr	r1, [r7, #28]
 8003982:	6a3a      	ldr	r2, [r7, #32]
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	61bb      	str	r3, [r7, #24]
   return(result);
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e5      	bne.n	800395c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2220      	movs	r2, #32
 800399a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2220      	movs	r2, #32
 80039a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e010      	b.n	80039d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69da      	ldr	r2, [r3, #28]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	4013      	ands	r3, r2
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	429a      	cmp	r2, r3
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	f43f af4a 	beq.w	8003864 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3770      	adds	r7, #112	; 0x70
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <__libc_init_array>:
 80039dc:	b570      	push	{r4, r5, r6, lr}
 80039de:	4d0d      	ldr	r5, [pc, #52]	; (8003a14 <__libc_init_array+0x38>)
 80039e0:	4c0d      	ldr	r4, [pc, #52]	; (8003a18 <__libc_init_array+0x3c>)
 80039e2:	1b64      	subs	r4, r4, r5
 80039e4:	10a4      	asrs	r4, r4, #2
 80039e6:	2600      	movs	r6, #0
 80039e8:	42a6      	cmp	r6, r4
 80039ea:	d109      	bne.n	8003a00 <__libc_init_array+0x24>
 80039ec:	4d0b      	ldr	r5, [pc, #44]	; (8003a1c <__libc_init_array+0x40>)
 80039ee:	4c0c      	ldr	r4, [pc, #48]	; (8003a20 <__libc_init_array+0x44>)
 80039f0:	f000 f820 	bl	8003a34 <_init>
 80039f4:	1b64      	subs	r4, r4, r5
 80039f6:	10a4      	asrs	r4, r4, #2
 80039f8:	2600      	movs	r6, #0
 80039fa:	42a6      	cmp	r6, r4
 80039fc:	d105      	bne.n	8003a0a <__libc_init_array+0x2e>
 80039fe:	bd70      	pop	{r4, r5, r6, pc}
 8003a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a04:	4798      	blx	r3
 8003a06:	3601      	adds	r6, #1
 8003a08:	e7ee      	b.n	80039e8 <__libc_init_array+0xc>
 8003a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a0e:	4798      	blx	r3
 8003a10:	3601      	adds	r6, #1
 8003a12:	e7f2      	b.n	80039fa <__libc_init_array+0x1e>
 8003a14:	08003a84 	.word	0x08003a84
 8003a18:	08003a84 	.word	0x08003a84
 8003a1c:	08003a84 	.word	0x08003a84
 8003a20:	08003a88 	.word	0x08003a88

08003a24 <memset>:
 8003a24:	4402      	add	r2, r0
 8003a26:	4603      	mov	r3, r0
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d100      	bne.n	8003a2e <memset+0xa>
 8003a2c:	4770      	bx	lr
 8003a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a32:	e7f9      	b.n	8003a28 <memset+0x4>

08003a34 <_init>:
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a36:	bf00      	nop
 8003a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3a:	bc08      	pop	{r3}
 8003a3c:	469e      	mov	lr, r3
 8003a3e:	4770      	bx	lr

08003a40 <_fini>:
 8003a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a42:	bf00      	nop
 8003a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a46:	bc08      	pop	{r3}
 8003a48:	469e      	mov	lr, r3
 8003a4a:	4770      	bx	lr
